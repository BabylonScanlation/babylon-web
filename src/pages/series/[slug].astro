---
// -----------------------------------------------------------------------------
// src/pages/series/[slug].astro
//
// Esta p√°gina muestra los detalles de una serie espec√≠fica, incluyendo su
// informaci√≥n, cap√≠tulos, comentarios y sistema de calificaci√≥n.
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// IMPORTACIONES DE COMPONENTES
// -----------------------------------------------------------------------------
import Layout from '../../layouts/Layout.astro';
import SeriesComments from '../../components/SeriesComments.astro';
// -----------------------------------------------------------------------------
// DEFINICI√ìN DE TIPOS (INTERFACES)
// -----------------------------------------------------------------------------
interface Chapter {
  chapter_number: number;
  title: string | null;
  created_at: string;
  views: number;
}

interface Comment {
  id: number;
  user_email: string;
  comment_text: string;
  created_at: string;
}

interface SeriesDetails {
  id: number;
  title: string;
  slug: string;
  description: string;
  cover_image_url: string;
  chapters: Chapter[];
  views?: number;
  created_at: string;
  status: string | null;
  type: string | null;
  genres: string | null;
  author: string | null;
  artist: string | null;
  published_by: string | null;
  alternative_names: string | null;
  serialized_by: string | null;
  stats: {
    averageRating: number;
    totalVotes: number;
    reactionCounts: Record<string, number>;
    userVote: number | null;
    userReaction: string | null;
  };
}

// -----------------------------------------------------------------------------
// OBTENCI√ìN DE DATOS DEL LADO DEL SERVIDOR (SSR)
// -----------------------------------------------------------------------------
const { slug } = Astro.params;
const user = Astro.locals.user;

let series: SeriesDetails | null = null;
let comments: Comment[] = [];
let error: string | null = null;

try {
  const response = await fetch(new URL(`/api/series/${slug}`, Astro.url));
  if (response.ok) {
    series = await response.json();
    if (series) {
      const commentsResponse = await fetch(
        new URL(`/api/comments/series/${series.id}`, Astro.url)
      );
      if (commentsResponse.ok) {
        comments = await commentsResponse.json();
      }
    }
  } else {
    error = `No se pudo encontrar la serie.
(Error: ${response.status})`;
  }
} catch (e) {
  console.error(e);
  error = 'Ocurri√≥ un error al cargar los datos de la serie.';
}

// -----------------------------------------------------------------------------
// FUNCIONES AUXILIARES (HELPERS)
// -----------------------------------------------------------------------------

/** Formatea la descripci√≥n para mostrar texto en cursiva.
 */
const formatDescription = (text: string | undefined) => {
  if (!text) return '';
  const escapedText = text.replace(/</g, '&lt;').replace(/>/g, '&gt;');
  return escapedText.replace(/\*(.*?)\*/g, '<i>$1</i>');
};

/** Formatea una cadena de fecha a un formato localizado completo.
 */
const formatFullDate = (dateString: string) => {
  if (!dateString) return 'N/A';
  return new Date(dateString).toLocaleString('es-ES', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
  });
};

// -----------------------------------------------------------------------------
// ESTADO INICIAL Y CONSTANTES PARA EL CLIENTE
// -----------------------------------------------------------------------------
const initialState = {
  userVote: series?.stats.userVote ?? null,
  userReaction: series?.stats.userReaction ?? null,
  isLoggedIn: !!user,
};

const stars = [1, 2, 3, 4, 5];
const reactions = [
  { emoji: 'üòÄ', title: '¬°Me encanta!', id: 'love' },
  { emoji: 'üòä', title: 'Me gusta', id: 'like' },
  { emoji: 'ü§î', title: 'Interesante', id: 'interesting' },
  { emoji: 'üòü', title: 'No me convence', id: 'dislike' },
  { emoji: 'üò†', title: 'Lo odio', id: 'hate' },
];
---

<Layout title={series?.title ?? 'Serie no encontrada'}>
  {
    series && (
      <div class="series-detail-page" data-series-id={series.id}>
        <section class="series-hero">
          <div class="series-header-grid">
            <h1 class="series-title-header">{series.title}</h1>
            <div class="cover-and-rating-wrapper">
              <div class="series-cover">
                <img
                  src={series.cover_image_url}
                  alt={`Portada de ${series.title}`}
                  class="cover-image"
                />
              </div>
              <div class="rating-section">
                <div class="stars-container">
                  {stars.map((star) =>
                    user ? (
                      <button
                        class="star"
                        data-value={star}
                        title={`Votar ${star} estrella${star > 1 ? 's' : ''}`}
                      >
                        ‚òÜ
                      </button>
                    ) : (
                      <button
                        class="star"
                        data-open-modal="login"
                        title="Debes tener una cuenta para poder votar."
                      >
                        ‚òÜ
                      </button>
                    )
                  )}
                </div>
                <div class="vote-count">
                  <span class="avg-rating">
                    {series.stats.averageRating.toFixed(1)}
                  </span>
                  <span>({series.stats.totalVotes} Votos)</span>
                </div>
              </div>
            </div>

            <div class="series-info-panel">
              <div class="info-tabs">
                <button class="tab active" data-tab="details">
                  Detalles
                </button>
                <button class="tab" data-tab="synopsis">
                  Sinopsis
                </button>

                <button class="tab" data-tab="chapters">
                  Cap√≠tulos
                </button>
                <button class="tab" data-tab="comments">
                  Comentarios
                </button>
              </div>
              <div id="details-content" class="tab-content active">
                <div class="series-meta">
                  <div class="meta-item">
                    <>
                      <span class="meta-label">Tipo: </span>
                      <span class="meta-value">{series.type || 'N/A'}</span>
                    </>
                  </div>
                  <div class="meta-item">
                    <>
                      <span class="meta-label">Autor: </span>
                      <span class="meta-value">{series.author || 'N/A'}</span>
                    </>
                  </div>
                  <div class="meta-item">
                    <>
                      <span class="meta-label">Artista: </span>
                      <span class="meta-value">{series.artist || 'N/A'}</span>
                    </>
                  </div>
                  <div class="meta-item">
                    <>
                      <span class="meta-label">Serializado por: </span>
                      <span class="meta-value">
                        {series.serialized_by || 'N/A'}
                      </span>
                    </>
                  </div>
                  <div class="meta-item meta-item-full">
                    <span class="meta-label">G√©nero(s):</span>
                    <div class="meta-value genre-tags">
                      {series.genres &&
                      series.genres.trim().toLowerCase() !== 'n/a' &&
                      series.genres.trim() !== ''
                        ? series.genres
                            .split(',')
                            .map((genre) => (
                              <span class="genre-tag">{genre.trim()}</span>
                            ))
                        : 'N/A'}
                    </div>
                  </div>
                </div>
                <div class="series-meta-grid">
                  <div class="meta-grid-item">
                    <>
                      <span>üóìÔ∏è Publicado:</span>
                      <span>{formatFullDate(series.created_at)}</span>
                    </>
                  </div>
                  <div class="meta-grid-item">
                    <>
                      <span>üì∂ Estado:</span>
                      <span class="status-na">{series.status || 'N/A'}</span>
                    </>
                  </div>
                  <div class="meta-grid-item">
                    <>
                      <span>‚úçÔ∏è Publicado por:</span>
                      <span>{series.published_by || 'N/A'}</span>
                    </>
                  </div>
                  <div class="meta-grid-item">
                    <>
                      <span>üëÅÔ∏è Vistas:</span>
                      <span>{series.views?.toLocaleString() || 0}</span>
                    </>
                  </div>
                  <div class="meta-grid-item full-width-grid">
                    <>
                      <span>üìö Nombres alternativos:</span>
                      <span>{series.alternative_names || 'N/A'}</span>
                    </>
                  </div>
                  <div class="reactions-container">
                    {reactions.map((reaction) => (
                      <div class="reaction-item">
                        {user ? (
                          <button
                            class:list={[
                              'reaction-emoji',
                              {
                                selected:
                                  series.stats.userReaction === reaction.emoji,
                              },
                            ]}
                            data-emoji={reaction.emoji}
                            title={reaction.title}
                          >
                            {reaction.emoji}
                          </button>
                        ) : (
                          <button
                            class="reaction-emoji"
                            data-open-modal="login"
                            title="Debes tener una cuenta para reaccionar."
                          >
                            {reaction.emoji}
                          </button>
                        )}
                        <span class="reaction-count">
                          {series.stats.reactionCounts[reaction.emoji] || 0}
                        </span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
              <div id="synopsis-content" class="tab-content synopsis-panel">
                <p set:html={formatDescription(series.description)} />
              </div>
              <div id="chapters-content" class="tab-content">
                <ul class="chapters-list">
                  {series.chapters.length > 0 ? (
                    series.chapters.map((chapter) => (
                      <li>
                        <a
                          href={`/series/${slug}/${chapter.chapter_number}`}
                          title="Ver ahora."
                        >
                          <span class="chapter-number">
                            Cap√≠tulo {chapter.chapter_number}
                          </span>

                          <span class="chapter-separator">|</span>
                          <span class="chapter-name">
                            {chapter.title || 'Sin t√≠tulo'}
                          </span>
                          <span class="chapter-separator">|</span>

                          <span class="chapter-views">
                            {chapter.views.toLocaleString()} Vistas
                          </span>
                          <span class="chapter-separator">|</span>
                          <span class="chapter-date">
                            {formatFullDate(series.created_at)}
                          </span>
                        </a>
                      </li>
                    ))
                  ) : (
                    <li>
                      <p>A√∫n no hay cap√≠tulos disponibles.</p>
                    </li>
                  )}
                </ul>
              </div>
              <div id="comments-content" class="tab-content">
                <div class="comments-container-wrapper">
                  <SeriesComments
                    comments={comments}
                    seriesId={series.id}
                    user={user}
                  />
                </div>
              </div>
            </div>
          </div>
        </section>
      </div>
    )
  }

  {error && <p class="error-message">{error}</p>}
</Layout>

<script define:vars={{ initialState, slug, reactions, user }}>
  // ... (Tu script del cliente se mantiene exactamente igual)
  function initializePage() {
    const state = initialState;
    if (!state) return;
    const tabs = document.querySelectorAll('.tab');
    const contents = document.querySelectorAll('.tab-content');
    tabs.forEach((tab) => {
      tab.addEventListener('click', () => {
        tabs.forEach((t) => t.classList.remove('active'));
        tab.classList.add('active');
        const tabName = tab.getAttribute('data-tab');
        contents.forEach((content) => {
          content.classList.toggle(
            'active',
            content.id === `${tabName}-content`
          );
        });
      });
    });
    const mainElement = document.querySelector('.series-detail-page');
    if (!(mainElement instanceof HTMLElement)) return;
    const seriesIdStr = mainElement.dataset.seriesId;
    if (!seriesIdStr) return;
    const seriesId = parseInt(seriesIdStr, 10);
    const ratingSection = document.querySelector('.rating-section');
    if (ratingSection instanceof HTMLElement && state.isLoggedIn) {
      const starsContainer = ratingSection.querySelector('.stars-container');
      const updateUserVoteUI = (vote) => {
        if (!starsContainer) return;
        const stars = starsContainer.querySelectorAll('.star');
        stars.forEach((s) => {
          if (s instanceof HTMLElement) {
            const starValue = parseInt(s.dataset.value || '0', 10);
            s.classList.toggle('selected', starValue <= (vote || 0));
          }
        });
      };
      updateUserVoteUI(state.userVote);
      starsContainer?.addEventListener('click', async (e) => {
        if (e.target instanceof HTMLElement) {
          const star = e.target.closest('.star');
          if (!(star instanceof HTMLElement)) return;
          const rating = parseInt(star.dataset.value || '0', 10);
          const newRating = rating === state.userVote ? null : rating;
          state.userVote = newRating;

          updateUserVoteUI(newRating);
          fetch('/api/series/rate', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ seriesId, rating: newRating }),
          });
        }
      });
    }
    const reactionsContainer = document.querySelector('.reactions-container');
    if (reactionsContainer instanceof HTMLElement && state.isLoggedIn) {
      const updateReactionsUI = (userReaction) => {
        const reactionButtons =
          reactionsContainer.querySelectorAll('.reaction-emoji');
        reactionButtons.forEach((btn) => {
          if (btn instanceof HTMLElement && btn.dataset.emoji) {
            btn.classList.toggle(
              'selected',
              btn.dataset.emoji === userReaction
            );
          }
        });
      };
      updateReactionsUI(state.userReaction);
      reactionsContainer.addEventListener('click', async (e) => {
        if (!(e.target instanceof HTMLElement)) return;
        const reactionBtn = e.target.closest('.reaction-emoji');
        if (!(reactionBtn instanceof HTMLElement) || !reactionBtn.dataset.emoji)
          return;
        const clickedEmoji = reactionBtn.dataset.emoji;
        const newReaction =
          state.userReaction === clickedEmoji ? null : clickedEmoji;
        state.userReaction = newReaction;
        updateReactionsUI(newReaction);
        try {
          await fetch('/api/series/react', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ seriesId: seriesId, emoji: newReaction }),
          });
          const response = await fetch(`/api/series/${slug}`);
          if (response.ok) {
            const updatedSeries = await response.json();
            const reactionCounts = updatedSeries.stats.reactionCounts;
            const reactionButtons =
              reactionsContainer.querySelectorAll('.reaction-emoji');
            reactionButtons.forEach((btn) => {
              if (btn instanceof HTMLElement && btn.dataset.emoji) {
                const emoji = btn.dataset.emoji;
                const countElement = btn.nextElementSibling;
                if (countElement) {
                  countElement.textContent = reactionCounts[emoji] || '0';
                }
              }
            });
          }
        } catch (error) {
          console.error('Error al actualizar la reacci√≥n:', error);
        }
      });
    }
  }
  initializePage();
  document.addEventListener('astro:page-load', initializePage);
</script>

<style>
  /* === INICIO DE ESTILOS MODIFICADOS PARA LA SOLUCI√ìN === */
  .series-hero {
    width: 100%;
    /* LA CORRECCI√ìN EST√Å AQU√ç: 
      Eliminamos 'background-color' para que herede el color oscuro del body,
      tal como lo ten√≠as originalmente.
*/
    padding-top: 1rem;
  }

  .series-header-grid {
    display: grid;
    grid-template-columns: 250px 1fr;
    gap: 2rem;
    align-items: start;

    /* Esto centra el grid dentro del .series-hero de ancho completo */
    max-width: 1200px;
    width: 100%;
    margin: 0 auto;
    padding: 0 1rem; /* Espaciado para los bordes en pantallas peque√±as */
  }

  /* El resto de la p√°gina ahora vive dentro del grid centrado, 
     as√≠ que ya no necesitamos este contenedor con max-width aqu√≠.
*/
  .main-content-wrapper {
    width: 100%;
    /* max-width: 1200px;
*/ /* <- Esto era el problema */
    /* margin: 0 auto;
*/ /* <- Esto era el problema */
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .series-detail-page {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
  }
  /* === FIN DE ESTILOS MODIFICADOS PARA LA SOLUCI√ìN === */

  /* El resto de los estilos se mantienen como los ten√≠as */
  .cover-and-rating-wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.75rem;
  }

  .series-info-panel {
    min-width: 0;
    color: #fff;
    display: flex;
    flex-direction: column;
  }

  .series-title-header {
    font-size: 2rem;
    text-align: center;
  }
  .series-cover {
    position: relative;
    border-radius: 8px;
    overflow: hidden;
    aspect-ratio: 2 / 3;
    width: 100%;
  }
  .cover-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  .rating-section {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
    width: 100%;
  }
  .stars-container {
    display: flex;
    align-items: center;
  }
  .star,
  .star-icon {
    font-size: 1.75rem;
    color: #777;
    background: none;
    border: none;
    padding: 0;
    line-height: 1;
    display: inline-block;
  }
  .star-link {
    text-decoration: none;
    cursor: pointer;
  }
  .vote-count {
    font-size: 0.9rem;
    color: #aaa;
    display: flex;
    align-items: baseline;
    gap: 0.5rem;
  }
  .avg-rating {
    font-size: 1.1rem;
    font-weight: bold;
    color: #ffc107;
  }
  .rating-section .star {
    cursor: pointer;
    transition:
      transform 0.2s ease,
      color 0.1s;
  }
  .rating-section .star:hover {
    transform: scale(1.2);
    color: #ffc107;
  }
  .star.selected,
  .stars-container:hover .star:hover,
  .stars-container:hover .star:hover ~ .star {
    color: #777;
  }
  .stars-container:hover .star:hover,
  .star.selected,
  .stars-container:hover .star.selected ~ .star {
    color: #ffc107;
  }
  .info-tabs {
    display: flex;
    gap: 0.5rem;
    border-bottom: 1px solid #333;
    flex-wrap: wrap;
  }
  .info-tabs .tab {
    background: none;
    border: none;
    color: #aaa;
    padding: 0.5rem 1rem;
    cursor: pointer;
    font-size: 1rem;
    border-bottom: 2px solid transparent;
    transition:
      color 0.2s,
      border-color 0.2s;
  }
  .info-tabs .tab.active {
    color: #fff;
    border-bottom-color: var(--accent-color);
  }
  .content-wrapper {
    position: relative;
    padding-top: 1rem;
    flex-grow: 1;
  }
  .tab-content {
    display: none;
  }
  .tab-content.active {
    display: flex;
    flex-direction: column;
  }
  .synopsis-panel {
    line-height: 1.6;
  }
  .series-meta {
    margin-bottom: 1.5rem;
    line-height: 1.8;
  }
  .meta-item {
    display: inline-flex;
    align-items: baseline;
    margin-right: 1.5rem;
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
  }
  .meta-label {
    font-weight: bold;
    color: #ccc;
    margin-right: 0.5rem;
    white-space: nowrap;
  }
  .meta-value {
    color: #e0e0e0;
  }
  .genre-tags {
    display: inline-grid;
    grid-template-columns: repeat(3, auto);
    gap: 0.25rem 0.75rem;
    vertical-align: baseline;
  }
  .genre-tag {
    background-color: #333;
    color: #eee;
    padding: 0.25rem 0.6rem;
    border-radius: 12px;
    font-size: 0.8rem;
    border: 1px solid #555;
    white-space: nowrap;
    text-align: center;
  }
  .series-meta-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    background-color: #2a2a2a;
    padding: 1rem;
    border-radius: 8px;
  }
  .meta-grid-item {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
  }
  .meta-grid-item.full-width-grid {
    grid-column: 1 / -1;
  }
  .meta-grid-item span:first-child {
    color: #aaa;
    font-weight: bold;
    display: inline-flex;
    align-items: center;
    gap: 0.4rem;
  }
  .reactions-container {
    grid-column: 1 / -1;
    display: flex;
    flex-direction: row;
    justify-content: space-around;
    align-items: center;
    padding-top: 0.75rem;
    margin-top: 0.75rem;
    border-top: 1px solid #444;
  }
  .reaction-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.25rem;
  }
  .reaction-emoji,
  .reaction-emoji-icon {
    font-size: 2rem;
    background: none;
    border: none;
    color: #fff;
    padding: 0;
    line-height: 1;
    display: inline-block;
    transition:
      transform 0.2s ease,
      filter 0.2s;
  }
  .reaction-link {
    text-decoration: none;
    cursor: pointer;
  }
  .reaction-count {
    font-size: 0.8rem;
    color: #ccc;
  }
  .reactions-container .reaction-emoji {
    cursor: pointer;
  }
  .reactions-container .reaction-emoji:hover {
    transform: scale(1.2);
  }
  .reactions-container .reaction-emoji.selected {
    transform: scale(1.1);
    filter: drop-shadow(0 0 5px var(--accent-color));
  }
  .reaction-link:hover .reaction-emoji-icon {
    transform: scale(1.1);
    opacity: 0.8;
  }
  .chapters-list {
    list-style: none;
    padding: 0;
    max-height: 400px;
    overflow-y: auto;
    border: 1px solid #333;
    border-radius: 8px;
    width: 100%;
  }
  .chapters-list li {
    border-bottom: 1px solid #333;
  }
  .chapters-list li:last-child {
    border-bottom: none;
  }
  .chapters-list li a {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem;
    background-color: var(--card-background);
    transition: background-color 0.2s;
    white-space: nowrap;
  }
  .chapters-list li a:hover {
    background-color: #333;
  }
  .chapter-number {
    color: #e0e0e0;
    font-weight: bold;
    flex-shrink: 0;
  }
  .chapter-name {
    color: #e0e0e0;
    flex-grow: 1;
    overflow: hidden;
    text-overflow: ellipsis;
    text-align: left;
  }
  .chapter-views {
    color: #aaa;
    font-size: 0.9em;
    flex-shrink: 0;
  }
  .chapter-date {
    color: #aaa;
    font-size: 0.9em;
    flex-shrink: 0;
  }
  .chapter-separator {
    color: #555;
  }
  .chapters-list li p {
    padding: 1rem;
    text-align: center;
    color: #888;
  }
  #comments-content > :global(.comments-section) {
    width: 100%;
    max-width: none;
    margin: 0;
    padding: 0;
    border-top: none;
  }
  .comments-container-wrapper {
    width: 100%;
  }

  @media (max-width: 900px) {
    .series-header-grid {
      grid-template-columns: 1fr;
      text-align: center;
      gap: 1.5rem;
      padding: 0 1rem;
    }
    .cover-and-rating-wrapper,
    .series-info-panel {
      width: 100%;
    }
    .series-cover {
      max-width: 200px;
      margin: 0 auto;
    }
    .series-meta {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem 1.5rem;
      text-align: left;
      line-height: 1.6;
      border-bottom: 1px solid #333;
      padding-bottom: 1rem;
    }
    .meta-item {
      margin: 0;
      padding: 0;
      border: none;
    }
    .meta-item.meta-item-full {
      flex-basis: 100%;
    }
    .genre-tags {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      margin-top: 0.25rem;
    }
    .series-meta-grid {
      text-align: left;
      grid-template-columns: 1fr;
    }
    .info-tabs {
      justify-content: center;
    }
    .chapters-list li a {
      flex-wrap: wrap;
      justify-content: space-between;
      row-gap: 0.25rem;
    }
    .chapter-number {
      order: 1;
    }
    .chapter-name {
      width: 100%;
      order: 3;
      text-align: left;
      margin-top: 0.25rem;
      color: #ccc;
    }
    .chapter-views {
      order: 2;
      display: inline;
    }
    .chapter-date,
    .chapter-separator {
      display: none;
    }
  }

  @media (min-width: 1200px) {
    .series-header-grid {
      max-width: 1400px; /* Permite que se expanda m√°s */
      grid-template-columns: minmax(280px, 350px) 1fr; /* Hace la portada ligeramente m√°s grande y flexible */
      gap: 3rem; /* Aumenta el espacio para m√°s aire */
    }
  }

  @media (max-width: 480px) {
    .series-title-header {
      font-size: 1.5rem;
      padding-top: 1rem;
    }
    .info-tabs .tab {
      padding: 0.5rem 0.75rem;
      font-size: 0.9rem;
    }
    .reaction-emoji,
    .reaction-emoji-icon {
      font-size: 1.5rem;
    }
  }
</style>
