---
// src/pages/admin/series.astro
import Layout from '../../layouts/Layout.astro';
// Importa el CSS de Cropper aquí si no lo haces globalmente o en el Layout
// import 'cropperjs/dist/cropper.css';

const sessionCookie = Astro.cookies.get('session');
if (sessionCookie?.value !== 'admin-logged-in') {
  return Astro.redirect('/admin-login');
}

const r2PublicUrlAssets = Astro.locals.runtime.env.R2_PUBLIC_URL_ASSETS;

interface Chapter {
  id: number;
  chapter_number: number;
  title: string | null;
  telegram_file_id: string; // Añadido para la generación de miniaturas
  url_portada: string | null; // URL de la portada del capítulo
}
interface Series {
  id: number;
  title: string;
  description: string;
  cover_image_url: string;
  slug: string;
  chapters: Chapter[];
  status: string | null;
  type: string | null;
  genres: string | null;
  author: string | null;
  artist: string | null;
  published_by: string | null;
  alternative_names: string | null;
  serialized_by: string | null;
  is_hidden: boolean; // Added for visibility control
}

let allSeries: Series[] = [];
const success = Astro.url.searchParams.get('success');
let error = Astro.url.searchParams.get('error');

try {
  const response = await fetch(
    new URL('/api/admin/series-with-chapters', Astro.url),
    {
      headers: { Cookie: `session=${sessionCookie.value}` },
    }
  );

  if (response.ok) {
    allSeries = await response.json();
  } else {
    error = `Error al cargar las series: ${response.statusText}`;
  }
} catch (e) {
  console.error(e);
  error = 'No se pudo conectar con la API para cargar las series.';
}
---

<Layout title="Gestionar Series">
  {/* Asegúrate de cargar el CSS de Cropper, ya sea aquí o en el Layout */}
  <link rel="stylesheet" href="/node_modules/cropperjs/dist/cropper.css" />
  <main class="admin-container">
    <a href="/admin" class="back-link">&larr; Volver al Panel</a>
    <h1>Gestionar Series y Capítulos</h1>

    {success && <p class="success-message">{success}</p>}
    {error && <p class="error-message">{error}</p>}

    {
      allSeries.length > 0 ? (
        allSeries.map((series) => (
          <details class="series-details">
            <summary>{series.title}</summary>
            <div class="series-content">
              <div class="series-info-and-forms">
                <div class="current-cover">
                  <p>Portada Actual</p>
                  <img
                    src={series.cover_image_url}
                    alt={`Portada de ${series.title}`}
                    class="cover-preview-img"
                  />
                </div>

                <div class="forms-container">
                  <form
                    action="/api/update-series"
                    method="post"
                    enctype="multipart/form-data"
                    class="admin-form"
                    id={`update-series-form-${series.id}`}
                  >
                    <input type="hidden" name="seriesId" value={series.id} />
                    <div class="form-group">
                      <>
                        <label for={`title-${series.id}`}>Título</label>
                        <input
                          type="text"
                          id={`title-${series.id}`}
                          name="title"
                          value={series.title}
                          required
                        />
                      </>
                    </div>
                    <div class="form-group">
                      <>
                        <label for={`desc-${series.id}`}>Descripción</label>
                        <textarea
                          id={`desc-${series.id}`}
                          name="description"
                          rows="4"
                          required
                        >
                          {series.description.trim()}
                        </textarea>
                      </>
                    </div>

                    <div class="form-grid">
                      <div class="form-group">
                        <>
                          <label for={`status-${series.id}`}>Estado</label>
                          <input
                            type="text"
                            id={`status-${series.id}`}
                            name="status"
                            value={series.status || ''}
                            placeholder="Ej: En emisión"
                          />
                        </>
                      </div>
                      <div class="form-group">
                        <>
                          <label for={`type-${series.id}`}>Tipo</label>
                          <input
                            type="text"
                            id={`type-${series.id}`}
                            name="type"
                            value={series.type || ''}
                            placeholder="Ej: Manga"
                          />
                        </>
                      </div>
                      <div class="form-group">
                        <>
                          <label for={`author-${series.id}`}>Autor</label>
                          <input
                            type="text"
                            id={`author-${series.id}`}
                            name="author"
                            value={series.author || ''}
                            placeholder="Autor de la obra"
                          />
                        </>
                      </div>
                      <div class="form-group">
                        <>
                          <label for={`artist-${series.id}`}>Artista</label>
                          <input
                            type="text"
                            id={`artist-${series.id}`}
                            name="artist"
                            value={series.artist || ''}
                            placeholder="Artista de la obra"
                          />
                        </>
                      </div>
                      <div class="form-group">
                        <>
                          <label for={`published_by-${series.id}`}>
                            Publicado por
                          </label>
                          <input
                            type="text"
                            id={`published_by-${series.id}`}
                            name="published_by"
                            value={series.published_by || ''}
                            placeholder="Ej: Shueisha"
                          />
                        </>
                      </div>
                      <div class="form-group">
                        <>
                          <label for={`serialized_by-${series.id}`}>
                            Serializado por
                          </label>
                          <input
                            type="text"
                            id={`serialized_by-${series.id}`}
                            name="serialized_by"
                            value={series.serialized_by || ''}
                            placeholder="Ej: Weekly Shōnen Jump"
                          />
                        </>
                      </div>
                    </div>
                    <div class="form-group">
                      <label for={`genres-${series.id}`}>
                        Géneros (separados por coma)
                      </label>
                      <input
                        type="text"
                        id={`genres-${series.id}`}
                        name="genres"
                        value={series.genres || ''}
                        placeholder="Ej: Acción, Aventura"
                      />
                    </div>
                    <div class="action-buttons-row">
                      <div class="update-button-wrapper">
                        <button
                          type="submit"
                          form={`update-series-form-${series.id}`}
                          class="update-series-button"
                        >
                          Actualizar Serie
                        </button>
                      </div>

                      <div class="form-group toggle-visibility-group">
                        <input
                          type="hidden"
                          id={`is_hidden_input-${series.id}`}
                          name="is_hidden"
                          value={series.is_hidden ? 'on' : 'off'}
                        />
                        <button
                          type="button"
                          class:list={[
                            'toggle-visibility-btn',
                            { 'is-hidden-true': series.is_hidden },
                            { 'is-hidden-false': !series.is_hidden },
                          ]}
                          data-series-id={series.id}
                          data-is-hidden={series.is_hidden}
                        >
                          {series.is_hidden ? 'Mostrar Serie' : 'Ocultar Serie'}
                        </button>
                      </div>
                    </div>
                  </form>

                  <form
                    action="/api/delete-series"
                    method="post"
                    onsubmit="return confirm('¿Estás seguro de que quieres eliminar TODA la serie?\\nEsta acción no se puede deshacer.');"
                  >
                    <input type="hidden" name="seriesId" value={series.id} />
                    <button type="submit" class="delete-btn">
                      Eliminar Serie Completa
                    </button>
                  </form>
                </div>
              </div>
              <div class="chapters-list">
                <h3>Capítulos ({series.chapters.length})</h3>
                {series.chapters.length > 0 ? (
                  <ul>
                    {series.chapters.map((chapter) => (
                      <li class="chapter-item">
                        <img
                          src={
                            chapter.url_portada ||
                            `${r2PublicUrlAssets}/covers/placeholder-chapter.jpg`
                          }
                          alt={`Miniatura del Capítulo ${chapter.chapter_number}`}
                          class="chapter-thumbnail-img"
                          onerror="this.onerror=null;this.src='${r2PublicUrlAssets}/covers/placeholder-chapter.jpg';"
                        />
                        <div class="chapter-details-and-controls">
                          <form
                            action="/api/update-chapter"
                            method="post"
                            class="update-chapter-form"
                          >
                            <span class="chapter-number-label">
                              Cap. {chapter.chapter_number}
                            </span>

                            <input
                              type="text"
                              name="title"
                              value={chapter.title || ''}
                              placeholder="Sin título"
                              class="chapter-title-input"
                            />
                            <input
                              type="hidden"
                              name="chapterId"
                              value={chapter.id}
                            />
                            <button
                              type="submit"
                              class="update-chapter-btn"
                              title="Guardar Título"
                            >
                              ✓
                            </button>
                          </form>

                          <div class="chapter-thumbnail-controls">
                            {/* Botón para seleccionar y recortar */}
                            <button
                              type="button"
                              class="select-thumbnail-btn update-series-button"
                              data-chapter-id={chapter.id}
                              data-series-slug={series.slug}
                              data-chapter-number={chapter.chapter_number}
                              title="Seleccionar y Recortar Miniatura Manualmente"
                            >
                              Seleccionar Portada
                            </button>
                          </div>
                        </div>

                        <form
                          action="/api/delete-chapters"
                          method="post"
                          onsubmit="return confirm('¿Seguro que quieres eliminar este capítulo?');"
                        >
                          <input
                            type="hidden"
                            name="chapterId"
                            value={chapter.id}
                          />
                          <button
                            type="submit"
                            class="delete-chapter-btn"
                            title="Eliminar Capítulo"
                          >
                            ✗
                          </button>
                        </form>
                      </li>
                    ))}
                  </ul>
                ) : (
                  <p>No hay capítulos para esta serie.</p>
                )}
              </div>
            </div>
          </details>
        ))
      ) : (
        <p>No se encontraron series para mostrar.</p>
      )
    }
  </main>

  <div id="crop-modal" class="crop-modal-overlay is-hidden">
    <div class="crop-modal-panel">
      <h2>Seleccionar Imagen para Portada</h2>
      <div id="image-selection-grid" class="image-selection-grid">
        <p>Cargando imágenes...</p>
      </div>
      <div id="cropper-container" class="cropper-container is-hidden">
        <div class="crop-image-wrapper">
          <img id="image-to-crop" src="" alt="Imagen para recortar" />
        </div>
        <div class="crop-actions">
          <button id="confirm-crop-btn" class="update-series-button"
            >Confirmar Recorte</button
          >
          <button id="cancel-crop-btn" class="delete-btn">Cancelar</button>
        </div>
      </div>
      <p id="crop-error" class="error-message" style="display: none;"></p>
    </div>
  </div>

  <script>
    import Cropper from 'cropperjs'; // Importar Cropper.js

    document.addEventListener('DOMContentLoaded', () => {
      // --- CÓDIGO PARA VISIBILIDAD (Sin cambios) ---
      document
        .querySelectorAll('.toggle-visibility-btn')
        .forEach((buttonElement) => {
          const button = buttonElement as HTMLButtonElement;
          button.addEventListener('click', async () => {
            const seriesId = button.dataset.seriesId;
            const currentIsHidden = button.dataset.isHidden === 'true';
            const newIsHidden = !currentIsHidden;
            const originalText = button.textContent;
            button.disabled = true;
            button.textContent = newIsHidden ? 'Mostrando...' : 'Ocultando...';
            button.classList.add('is-loading');

            try {
              const response = await fetch('/api/series/toggle-visibility', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  seriesId: parseInt(seriesId!),
                  isHidden: newIsHidden,
                }),
              });

              if (!response.ok) {
                const errorData = await response.json();
                throw new Error(
                  errorData.error || 'Error al cambiar visibilidad'
                );
              }
              button.dataset.isHidden = newIsHidden.toString();
              button.textContent = newIsHidden
                ? 'Mostrar Serie'
                : 'Ocultar Serie';
              button.classList.toggle('is-hidden-true', newIsHidden);
              button.classList.toggle('is-hidden-false', !newIsHidden);
            } catch (error) {
              console.error('Error al cambiar visibilidad:', error);
              alert(
                `Error: ${error instanceof Error ? error.message : 'Error desconocido'}`
              );
              button.textContent = originalText;
            } finally {
              button.disabled = false;
              button.classList.remove('is-loading');
            }
          });
        });
      // --- FIN CÓDIGO VISIBILIDAD ---

      // --- NUEVA LÓGICA PARA RECORTAR MINIATURAS ---
      const cropModal = document.getElementById('crop-modal');
      const imageSelectionGrid = document.getElementById(
        'image-selection-grid'
      );
      const cropperContainer = document.getElementById('cropper-container');
      const imageToCropElement = document.getElementById(
        'image-to-crop'
      ) as HTMLImageElement | null;
      const confirmCropBtn = document.getElementById(
        'confirm-crop-btn'
      ) as HTMLButtonElement | null; // Tipado como botón
      const cancelCropBtn = document.getElementById('cancel-crop-btn');
      const cropErrorElement = document.getElementById('crop-error');

      let cropperInstance: Cropper | null = null;
      let currentChapterId: string | null = null;
      let currentImgPreviewElement: HTMLImageElement | null = null;

      function showCropError(message: string) {
        if (cropErrorElement) {
          cropErrorElement.textContent = message;
          cropErrorElement.style.display = 'block';
        }
      }
      function hideCropError() {
        if (cropErrorElement) {
          cropErrorElement.style.display = 'none';
        }
      }

      function closeModal() {
        if (cropModal) cropModal.classList.add('is-hidden');
        if (cropperInstance) {
          cropperInstance.destroy();
          cropperInstance = null;
        }
        if (imageToCropElement) imageToCropElement.src = '';
        if (imageSelectionGrid)
          imageSelectionGrid.innerHTML = '<p>Cargando imágenes...</p>';
        if (cropperContainer) cropperContainer.classList.add('is-hidden');
        if (imageSelectionGrid)
          imageSelectionGrid.classList.remove('is-hidden');
        currentChapterId = null;
        currentImgPreviewElement = null;
        hideCropError();
      }

      document
        .querySelectorAll('.select-thumbnail-btn')
        .forEach((buttonElement) => {
          const button = buttonElement as HTMLButtonElement;
          button.addEventListener('click', async () => {
            currentChapterId = button.dataset.chapterId || null;
            const seriesSlug = button.dataset.seriesSlug;
            const chapterNumber = button.dataset.chapterNumber;
            currentImgPreviewElement = button
              .closest('.chapter-item')
              ?.querySelector(
                '.chapter-thumbnail-img'
              ) as HTMLImageElement | null;

            if (
              !currentChapterId ||
              !seriesSlug ||
              chapterNumber === undefined
            ) {
              alert('Error: Faltan datos del capítulo.');
              return;
            }

            if (cropModal) cropModal.classList.remove('is-hidden');
            if (imageSelectionGrid)
              imageSelectionGrid.innerHTML =
                '<p>Cargando imágenes del capítulo...</p>';
            hideCropError();

            try {
              // AJUSTA ESTA URL A LA RUTA PÚBLICA DE TU BUCKET R2_CACHE
              const r2PublicCacheUrl = (
                Astro.locals.runtime?.env?.R2_PUBLIC_URL_CACHE || ''
              ).replace(/\/$/, ''); // Asegura que no haya barra al final
              if (!r2PublicCacheUrl) {
                throw new Error(
                  'La URL pública de R2_CACHE no está configurada.'
                );
              }
              const manifestUrl = `${r2PublicCacheUrl}/${seriesSlug}/${chapterNumber}/manifest.json`;

              const response = await fetch(manifestUrl);

              if (!response.ok) {
                // Intenta cargar desde el endpoint API si R2 falla (puede que aún no esté procesado)
                console.warn(
                  `Manifest no encontrado en R2 (${manifestUrl}), intentando API /api/series/${seriesSlug}/${chapterNumber}...`
                );
                const apiResponse = await fetch(
                  `/api/series/${seriesSlug}/${chapterNumber}`
                );
                if (!apiResponse.ok) {
                  const errorData = await apiResponse
                    .json()
                    .catch(() => ({ error: `Error ${apiResponse.status}` }));
                  throw new Error(
                    errorData.error ||
                      `Error ${apiResponse.status} al cargar datos del capítulo desde API.`
                  );
                }
                const apiData = await apiResponse.json();
                if (!apiData.imageUrls || apiData.imageUrls.length === 0) {
                  throw new Error(
                    'El capítulo no tiene imágenes o aún se está procesando.'
                  );
                }
                // Si la API funcionó, usamos esas URLs (que deberían ser de R2)
                displayImagesForSelection(apiData.imageUrls);
              } else {
                const manifest: { imageUrls: string[] } = await response.json();
                if (!manifest.imageUrls || manifest.imageUrls.length === 0) {
                  throw new Error('El manifest del capítulo está vacío.');
                }
                displayImagesForSelection(manifest.imageUrls);
              }
            } catch (error) {
              console.error('Error al cargar imágenes para recortar:', error);
              showCropError(
                `Error al cargar imágenes: ${error instanceof Error ? error.message : String(error)}`
              );
              if (imageSelectionGrid)
                imageSelectionGrid.innerHTML =
                  '<p>Error al cargar imágenes.</p>';
            }
          });
        });

      // Función separada para mostrar imágenes y añadir listeners
      const displayImagesForSelection = (imageUrls: string[]) => {
        if (imageSelectionGrid) {
          imageSelectionGrid.innerHTML = ''; // Limpia el mensaje de carga
          imageUrls.forEach((url) => {
            const img = document.createElement('img');
            img.src = url;
            img.alt = 'Seleccionar esta imagen';
            img.loading = 'lazy';
            img.addEventListener('click', () => {
              if (imageToCropElement) {
                imageToCropElement.src = url;
                if (imageSelectionGrid)
                  imageSelectionGrid.classList.add('is-hidden');
                if (cropperContainer)
                  cropperContainer.classList.remove('is-hidden');

                if (cropperInstance) {
                  cropperInstance.destroy();
                }
                // Corrección 1: Quitar 'as Cropper.Options' y añadir @ts-expect-error
                cropperInstance = new Cropper(imageToCropElement, {
                  // @ts-expect-error - aspectRatio es válido pero puede faltar en tipos
                  aspectRatio: 2 / 3,
                  viewMode: 1,
                  autoCropArea: 0.8,
                  movable: true,
                  zoomable: true,
                  rotatable: false,
                  scalable: false,
                  responsive: true,
                  checkOrientation: false,
                }); // SIN 'as Cropper.Options'
              }
            });
            imageSelectionGrid.appendChild(img);
          });
        }
      };

      confirmCropBtn?.addEventListener('click', async () => {
        if (
          !cropperInstance ||
          !currentChapterId ||
          !imageToCropElement ||
          !confirmCropBtn
        )
          return;

        confirmCropBtn.textContent = 'Procesando...';
        confirmCropBtn.disabled = true;
        hideCropError();

        try {
          // Usa getCroppedCanvas() (método correcto) y redimensiona a 200x300 en un canvas offscreen
          const croppedCanvas = cropperInstance.getCropperCanvas();
          if (!(croppedCanvas instanceof HTMLCanvasElement)) {
            throw new Error(
              'getCroppedCanvas no devolvió un elemento Canvas válido.'
            );
          }

          const targetWidth = 200;
          const targetHeight = 300;
          const canvas = document.createElement('canvas');
          canvas.width = targetWidth;
          canvas.height = targetHeight;
          const ctx = canvas.getContext('2d');
          if (!ctx) {
            throw new Error(
              'No se pudo obtener el contexto 2D para redimensionar la imagen.'
            );
          }
          ctx.imageSmoothingEnabled = true;
          ctx.imageSmoothingQuality = 'high';
          ctx.drawImage(croppedCanvas, 0, 0, targetWidth, targetHeight);

          // CORRECCIÓN 3 (cont.): Usa el casting antes de llamar a toBlob
          (canvas as HTMLCanvasElement).toBlob(
            async (blob) => {
              if (!blob) {
                throw new Error(
                  'No se pudo generar el Blob de la imagen recortada.'
                );
              }

              const formData = new FormData();
              formData.append('chapterId', currentChapterId!);
              formData.append(
                'thumbnailImage',
                blob,
                `chapter-${currentChapterId}-thumbnail.jpg`
              );

              const response = await fetch('/api/upload-chapter-thumbnail', {
                method: 'POST',
                body: formData,
              });

              const result = await response.json();

              if (response.ok && result.thumbnailUrl) {
                if (currentImgPreviewElement) {
                  currentImgPreviewElement.src =
                    result.thumbnailUrl + `?t=${Date.now()}`;
                }
                alert('Miniatura actualizada con éxito.');
                closeModal();
              } else {
                throw new Error(
                  result.error ||
                    result.details ||
                    'Error al subir la miniatura.'
                );
              }
            },
            'image/jpeg',
            0.9
          );
        } catch (error) {
          console.error('Error al recortar o subir:', error);
          showCropError(
            `Error: ${error instanceof Error ? error.message : 'Error desconocido'}`
          );
        } finally {
          confirmCropBtn.textContent = 'Confirmar Recorte';
          confirmCropBtn.disabled = false;
        }
      });

      cancelCropBtn?.addEventListener('click', closeModal);
      cropModal?.addEventListener('click', (e) => {
        if (e.target === cropModal) {
          closeModal();
        }
      });

      // --- FIN LÓGICA MINIATURAS ---
    });
  </script>
</Layout>

<style>
  /* --- ESTILOS GENERALES (Sin cambios) --- */
  .form-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
  }
  .admin-container {
    padding: 2rem;
    max-width: 1350px;
    margin: 0 auto;
  }
  h1 {
    margin-bottom: 1.5rem;
  }
  .back-link {
    display: inline-block;
    margin-bottom: 1.5rem;
    color: var(--accent-color);
  }
  .success-message,
  .error-message {
    padding: 1rem;
    margin-bottom: 1rem;
    border-radius: 4px;
    text-align: center;
  }
  .success-message {
    background-color: rgba(46, 204, 113, 0.2);
    color: #2ecc71;
  }
  .error-message {
    background-color: rgba(231, 76, 60, 0.2);
    color: #e74c3c;
  }
  .series-details {
    background-color: var(--card-background);
    border-radius: 8px;
    margin-bottom: 1rem;
    border: 1px solid #333;
  }
  .series-details summary {
    padding: 1rem;
    font-size: 1.2rem;
    font-weight: bold;
    cursor: pointer;
  }
  .series-content {
    padding: 1.5rem;
    border-top: 1px solid #444;
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 2rem;
  }
  .series-info-and-forms {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  .current-cover {
    text-align: center;
  }
  .current-cover p {
    font-weight: bold;
    margin-bottom: 0.75rem;
  }
  .cover-preview-img {
    max-width: 180px;
    width: 100%;
    height: auto;
    border-radius: 8px;
    border: 2px solid #444;
  }
  .forms-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  .action-buttons-row {
    display: flex;
    gap: 1rem;
  }
  .action-buttons-row > .update-button-wrapper,
  .action-buttons-row > .form-group {
    flex: 1;
    margin-top: 0;
  }
  .action-buttons-row > .update-button-wrapper > .update-series-button {
    width: 100%;
    font-weight: bold;
  }
  .action-buttons-row > .form-group > button {
    width: 100%;
  }
  .admin-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
  }
  .admin-form input,
  .admin-form textarea {
    width: 100%;
    padding: 0.75rem;
    background-color: #333;
    border: 1px solid #555;
    color: var(--font-color);
    border-radius: 4px;
  }
  .admin-form button,
  button {
    /* Aplica a todos los botones */
    font-weight: bold;
  }
  button {
    /* Estilos generales de botón */
    padding: 0.75rem 1.5rem;
    background-color: var(--accent-color);
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 0.5rem;
    width: 100%; /* Por defecto ocupan todo el ancho */
    transition: background-color 0.2s;
  }
  button:hover:not(:disabled) {
    background-color: #009acd; /* Un poco más oscuro para hover */
  }
  button:disabled {
    background-color: #555;
    cursor: not-allowed;
  }
  .delete-btn {
    background-color: #c0392b;
  }
  .delete-btn:hover:not(:disabled) {
    background-color: #a93226;
  }
  .chapters-list {
    overflow-y: auto;
    padding-right: 10px;
    max-height: 500px; /* Limita altura para scroll */
  }
  .chapters-list h3 {
    margin-bottom: 1rem;
  }
  .chapters-list ul {
    list-style: none;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    padding: 0;
  }
  .chapter-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.5rem 0.75rem;
    border: 1px solid #444;
    border-radius: 4px;
  }
  .chapter-thumbnail-img {
    width: 50px; /* Tamaño fijo para la miniatura en la lista */
    height: 75px;
    object-fit: cover;
    border-radius: 4px;
    flex-shrink: 0;
    background-color: #222; /* Fondo mientras carga */
  }
  .chapter-details-and-controls {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    gap: 0.5rem;
  }
  .update-chapter-form {
    flex-grow: 1;
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }
  .chapter-number-label {
    white-space: nowrap;
  }
  .chapter-title-input {
    width: 100%;
    background-color: #333;
    border: 1px solid #555;
    color: var(--font-color);
    border-radius: 4px;
    padding: 0.5rem;
  }
  .update-chapter-btn,
  .delete-chapter-btn {
    padding: 0;
    margin: 0; /* Resetea margen */
    width: 32px;
    height: 32px;
    font-size: 1.2rem;
    flex-shrink: 0;
    margin-top: 0; /* Anula margen general de botón */
  }
  .update-chapter-btn {
    background-color: #27ae60;
  }
  .update-chapter-btn:hover:not(:disabled) {
    background-color: #218838;
  }
  .delete-chapter-btn {
    background-color: #c0392b;
  }
  .delete-chapter-btn:hover:not(:disabled) {
    background-color: #a93226;
  }
  .toggle-visibility-btn {
    padding: 0.75rem 1.5rem;
    border-radius: 4px;
    font-weight: bold;
    text-align: center;
    font-family: inherit;
    border: none;
    cursor: pointer;
    width: 100%;
    margin-top: 0; /* Anula margen general */
  }
  .toggle-visibility-btn.is-hidden-true {
    background-color: #28a745;
    color: white;
  }
  .toggle-visibility-btn.is-hidden-true:hover {
    background-color: #218838;
  }
  .toggle-visibility-btn.is-hidden-false {
    background-color: #c0392b;
    color: white;
  }
  .toggle-visibility-btn.is-hidden-false:hover {
    background-color: #a93226;
  }
  .toggle-visibility-btn.is-loading {
    cursor: wait;
  }
  .chapter-thumbnail-controls {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    flex-wrap: wrap;
  }
  .select-thumbnail-btn {
    /* Estilo específico para el nuevo botón */
    width: auto; /* No ocupa todo el ancho */
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
    margin-top: 0; /* Anula margen general */
    background-color: #3498db; /* Azul para diferenciar */
  }
  .select-thumbnail-btn:hover:not(:disabled) {
    background-color: #2980b9;
  }

  @media (max-width: 768px) {
    .series-content {
      grid-template-columns: 1fr;
    }
    .chapters-list {
      margin-top: 2rem;
      max-height: none; /* Sin límite de altura en móvil */
    }
    .form-grid {
      grid-template-columns: 1fr;
    }
    .chapter-item {
      flex-wrap: wrap; /* Permite que el botón de borrar baje */
    }
    .delete-chapter-btn {
      margin-left: auto; /* Mueve el botón de borrar a la derecha */
    }
  }

  /* --- ESTILOS DEL MODAL (Ya añadidos en la respuesta anterior) --- */
  .crop-modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(5px);
    z-index: 2000;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 1rem;
  }
  .crop-modal-overlay.is-hidden {
    display: none;
  }
  .crop-modal-panel {
    background-color: var(--card-background);
    padding: 1.5rem 2rem;
    border-radius: 8px;
    max-width: 90vw;
    max-height: 90vh;
    overflow-y: auto;
    border: 1px solid #444;
    text-align: center;
    display: flex; /* Añadido para flexbox */
    flex-direction: column; /* Dirección columna */
  }
  .crop-modal-panel h2 {
    margin-bottom: 1rem;
  }
  .image-selection-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
    gap: 1rem;
    margin-top: 1.5rem;
    max-height: 40vh;
    overflow-y: auto;
    margin-bottom: 1.5rem;
    border: 1px solid #333;
    padding: 1rem;
    flex-shrink: 0; /* Evita que se encoja si el cropper es grande */
  }
  .image-selection-grid.is-hidden {
    display: none;
  } /* Añadido */
  .image-selection-grid img {
    width: 100%;
    height: auto;
    aspect-ratio: 1 / 1;
    object-fit: cover;
    cursor: pointer;
    border: 2px solid transparent;
    transition: border-color 0.2s;
  }
  .image-selection-grid img:hover {
    border-color: var(--accent-color);
  }
  .cropper-container {
    margin-top: 1rem;
    flex-grow: 1; /* Ocupa espacio disponible */
    display: flex; /* Añadido */
    flex-direction: column; /* Dirección columna */
    min-height: 0; /* Necesario para flexbox en contenedor con scroll */
  }
  .cropper-container.is-hidden {
    display: none;
  }
  .crop-image-wrapper {
    /* max-width: 60vw; Ya no es necesario con flex */
    /* max-height: 50vh; Ya no es necesario */
    margin: 0 auto 1rem auto;
    overflow: hidden;
    flex-grow: 1; /* Permite que crezca */
    display: flex; /* Centra la imagen si es pequeña */
    justify-content: center;
    align-items: center;
    min-height: 200px; /* Altura mínima */
  }
  #image-to-crop {
    display: block;
    max-width: 100%;
    max-height: 100%; /* Limita altura dentro del wrapper */
  }
  .crop-actions {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-top: 1rem;
    flex-shrink: 0; /* Evita que se encoja */
  }
  .crop-actions button {
    width: auto;
    padding: 0.5rem 1.5rem;
    margin-top: 0; /* Anula margen general */
  }
  #crop-error {
    margin-top: 1rem;
  }
</style>
