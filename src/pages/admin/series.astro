---
// src/pages/admin/series.astro
import Layout from '../../layouts/Layout.astro';
import AdminDescriptionTextarea from '../../components/AdminDescriptionTextarea.astro';
import 'cropperjs/dist/cropper.css'; // Importación de CSS de Cropper

const sessionCookie = Astro.cookies.get('session');
if (sessionCookie?.value !== 'admin-logged-in') {
  return Astro.redirect('/admin-login');
}

const r2PublicUrlAssets = Astro.locals.runtime.env.R2_PUBLIC_URL_ASSETS;

interface Chapter {
  id: number;
  chapter_number: number;
  title: string | null;
  telegram_file_id: string;
  url_portada: string | null;
}
interface Series {
  id: number;
  title: string;
  description: string;
  cover_image_url: string;
  slug: string;
  chapters: Chapter[];
  status: string | null;
  type: string | null;
  genres: string | null;
  author: string | null;
  artist: string | null;
  published_by: string | null;
  alternative_names: string | null;
  serialized_by: string | null;
  is_hidden: boolean;
}

let allSeries: Series[] = [];
const success = Astro.url.searchParams.get('success');
let error = Astro.url.searchParams.get('error');

try {
  const response = await fetch(
    new URL('/api/admin/series-with-chapters', Astro.url),
    {
      headers: { Cookie: `session=${sessionCookie.value}` },
    }
  );

  if (response.ok) {
    allSeries = await response.json();
  } else {
    error = `Error al cargar las series: ${response.statusText}`;
  }
} catch (e) {
  console.error(e);
  error = 'No se pudo conectar con la API para cargar las series.';
}
---

<Layout title="Gestionar Series">
  <main class="admin-container">
    <a href="/admin" class="back-link">&larr; Volver al Panel</a>
    <h1>Gestionar Series y Capítulos</h1>

    {success && <p class="success-message">{success}</p>}
    {error && <p class="error-message">{error}</p>}

    {
      allSeries.length > 0 ? (
        allSeries.map((series) => (
          <details class="series-details">
            <summary>{series.title}</summary>
            <div class="series-content">
              <div class="series-info-and-forms">
                <div class="current-cover">
                  <p>Portada Actual</p>
                  <img
                    src={series.cover_image_url}
                    alt={`Portada de ${series.title}`}
                    class="cover-preview-img"
                  />
                </div>
                <div class="forms-container">
                  <form
                    action="/api/update-series"
                    method="post"
                    enctype="multipart/form-data"
                    class="admin-form"
                    id={`update-series-form-${series.id}`}
                  >
                    <input type="hidden" name="seriesId" value={series.id} />
                    {/* Campos del formulario de serie (Título, Descripción, etc.) */}
                    <div class="form-group">
                      <>
                        <label for={`title-${series.id}`}>Título</label>
                        <input
                          type="text"
                          id={`title-${series.id}`}
                          name="title"
                          value={series.title}
                          required
                        />
                      </>
                    </div>
                    <div class="form-group">
                      <>
                        <label for={`desc-${series.id}`}>Descripción</label>
                        <AdminDescriptionTextarea
                          id={`desc-${series.id}`}
                          name="description"
                          rows={4}
                          required={true}
                          value={series.description}
                        />
                      </>
                    </div>
                    <div class="form-group">
                      <label for={`coverImage-${series.id}`}>
                        Nueva Portada (Opcional)
                      </label>
                      <input
                        type="file"
                        id={`coverImage-${series.id}`}
                        name="coverImage"
                        accept="image/jpeg,image/png,image/webp"
                      />
                    </div>
                    <div class="form-grid">
                      <div class="form-group">
                        <label for={`status-${series.id}`}>Estado</label>
                        <input
                          type="text"
                          id={`status-${series.id}`}
                          name="status"
                          value={series.status || ''}
                          placeholder="Ej: En emisión"
                        />
                      </div>
                      <div class="form-group">
                        <label for={`type-${series.id}`}>Tipo</label>
                        <input
                          type="text"
                          id={`type-${series.id}`}
                          name="type"
                          value={series.type || ''}
                          placeholder="Ej: Manga"
                        />
                      </div>
                      <div class="form-group">
                        <label for={`author-${series.id}`}>Autor</label>
                        <input
                          type="text"
                          id={`author-${series.id}`}
                          name="author"
                          value={series.author || ''}
                          placeholder="Autor de la obra"
                        />
                      </div>
                      <div class="form-group">
                        <label for={`artist-${series.id}`}>Artista</label>
                        <input
                          type="text"
                          id={`artist-${series.id}`}
                          name="artist"
                          value={series.artist || ''}
                          placeholder="Artista de la obra"
                        />
                      </div>
                      <div class="form-group">
                        <label for={`published_by-${series.id}`}>
                          Publicado por
                        </label>
                        <input
                          type="text"
                          id={`published_by-${series.id}`}
                          name="published_by"
                          value={series.published_by || ''}
                          placeholder="Ej: Shueisha"
                        />
                      </div>
                      <div class="form-group">
                        <label for={`serialized_by-${series.id}`}>
                          Serializado por
                        </label>
                        <input
                          type="text"
                          id={`serialized_by-${series.id}`}
                          name="serialized_by"
                          value={series.serialized_by || ''}
                          placeholder="Ej: Weekly Shōnen Jump"
                        />
                      </div>
                    </div>
                    <div class="form-group">
                      <label for={`alternative_names-${series.id}`}>
                        Nombres Alternativos (separados por coma)
                      </label>
                      <input
                        type="text"
                        id={`alternative_names-${series.id}`}
                        name="alternative_names"
                        value={series.alternative_names || ''}
                        placeholder="Ej: Alias 1, Alias 2"
                      />
                    </div>
                    <div class="form-group">
                      <label for={`genres-${series.id}`}>
                        Géneros (separados por coma)
                      </label>
                      <input
                        type="text"
                        id={`genres-${series.id}`}
                        name="genres"
                        value={series.genres || ''}
                        placeholder="Ej: Acción, Aventura"
                      />
                    </div>
                    <div class="action-buttons-row">
                      <div class="update-button-wrapper">
                        <button
                          type="submit"
                          form={`update-series-form-${series.id}`}
                          class="update-series-button"
                        >
                          Actualizar Serie
                        </button>
                      </div>
                      <div class="form-group toggle-visibility-group">
                        <input
                          type="hidden"
                          id={`is_hidden_input-${series.id}`}
                          name="is_hidden"
                          value={series.is_hidden ? 'on' : 'off'}
                        />
                        <button
                          type="button"
                          class:list={[
                            'toggle-visibility-btn',
                            { 'is-hidden-true': series.is_hidden },
                            { 'is-hidden-false': !series.is_hidden },
                          ]}
                          data-series-id={series.id}
                          data-is-hidden={series.is_hidden.toString()}
                        >
                          {series.is_hidden ? 'Mostrar Serie' : 'Ocultar Serie'}
                        </button>
                      </div>
                    </div>
                  </form>{' '}
                  {/* Cierre del form de actualizar serie */}
                  <form
                    action="/api/delete-series"
                    method="post"
                    onsubmit="return confirm('¿Estás seguro de que quieres eliminar TODA la serie?\nEsta acción no se puede deshacer.');"
                  >
                    <input type="hidden" name="seriesId" value={series.id} />
                    <button type="submit" class="delete-btn">
                      Eliminar Serie Completa
                    </button>
                  </form>{' '}
                  {/* Cierre del form de eliminar serie */}
                </div>{' '}
                {/* Cierre de forms-container */}
              </div>{' '}
              {/* Cierre de series-info-and-forms */}
              <div class="chapters-list">
                <h3>Capítulos ({series.chapters.length})</h3>
                {series.chapters.length > 0 ? (
                  <ul>
                    {series.chapters.map((chapter) => (
                      <li class="chapter-item">
                        <img
                          src={
                            chapter.url_portada ||
                            `${r2PublicUrlAssets}/covers/placeholder-chapter.jpg`
                          }
                          alt={`Miniatura del Capítulo ${chapter.chapter_number}`}
                          class="chapter-thumbnail-img"
                          onerror={`this.onerror=null; this.src='${r2PublicUrlAssets}/covers/placeholder-chapter.jpg';`}
                        />
                        <div class="chapter-details-and-controls">
                          <form
                            action="/api/update-chapter"
                            method="post"
                            class="update-chapter-form"
                          >
                            <span class="chapter-number-label">
                              Cap. {chapter.chapter_number}
                            </span>
                            <input
                              type="text"
                              name="title"
                              value={chapter.title || ''}
                              placeholder="Sin título"
                              class="chapter-title-input"
                            />
                            <input
                              type="hidden"
                              name="chapterId"
                              value={chapter.id}
                            />
                            <button
                              type="submit"
                              class="update-chapter-btn"
                              title="Guardar Título"
                            >
                              ✓
                            </button>
                          </form>

                          <div class="chapter-thumbnail-controls">
                            {/* NUEVO BOTÓN */}
                            <button
                              type="button"
                              class="crop-thumbnail-btn"
                              data-chapter-id={chapter.id}
                              data-series-slug={series.slug}
                              data-chapter-number={chapter.chapter_number}
                              title="Seleccionar y Recortar Portada"
                            >
                              Recortar Portada
                            </button>
                            {/* FIN NUEVO BOTÓN */}

                            <input
                              type="file"
                              class="upload-thumbnail-input"
                              data-chapter-id={chapter.id}
                              accept="image/jpeg,image/png,image/webp"
                              title="Subir Miniatura Manualmente"
                            />
                          </div>
                        </div>

                        <form
                          action="/api/delete-chapters"
                          method="post"
                          onsubmit="return confirm('¿Seguro que quieres eliminar este capítulo?');"
                        >
                          <input
                            type="hidden"
                            name="chapterId"
                            value={chapter.id}
                          />
                          <button
                            type="submit"
                            class="delete-chapter-btn"
                            title="Eliminar Capítulo"
                          >
                            ✗
                          </button>
                        </form>
                      </li>
                    ))}
                  </ul>
                ) : (
                  <p>No hay capítulos para esta serie.</p>
                )}
              </div>{' '}
              {/* Cierre de chapters-list */}
            </div>{' '}
            {/* Cierre de series-content */}
          </details> // Cierre de series-details
        ))
      ) : (
        <p>No se encontraron series para mostrar.</p>
      )
    }
  </main>

  {/* INICIO NUEVO MODAL */}
  <div id="cropper-modal" class="cropper-modal-overlay is-hidden">
    <div class="cropper-modal-panel">
      <div class="modal-header">
        <h3>
          Recortar Miniatura del Capítulo <span id="cropper-chapter-number"
          ></span>
        </h3>
        <button id="close-cropper-modal-btn" class="close-modal-btn"
          >&times;</button
        >
      </div>
      <div class="modal-body">
        <p id="image-selection-message">
          Selecciona la imagen que quieres usar como miniatura:
        </p>
        <div id="image-selection-container" class="image-selection-grid">
          {/* Aquí se cargarán las imágenes del capítulo dinámicamente */}
        </div>
        <div id="cropper-container" style="display: none;">
          <p>Ajusta el recuadro para seleccionar la miniatura (aspecto 2:3).</p>
          <div class="img-container">
            <img id="cropper-image" src="" alt="Imagen para recortar" />
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button id="cancel-crop-btn" class="modal-btn cancel-btn"
          >Cancelar</button
        >
        <button id="confirm-crop-btn" class="modal-btn confirm-btn" disabled
          >Confirmar Recorte</button
        >
      </div>
      <p
        id="cropper-error"
        class="error-message"
        style="display:none; margin-top: 1rem;"
      >
      </p>
    </div>
  </div>
  {/* FIN NUEVO MODAL */}
</Layout>

<style>
  /* --- Tus estilos existentes --- */
  .form-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
  }
  .admin-container {
    padding: 2rem;
    max-width: 1350px;
    margin: 0 auto;
  }
  h1 {
    margin-bottom: 1.5rem;
  }
  .back-link {
    display: inline-block;
    margin-bottom: 1.5rem;
    color: var(--accent-color);
  }
  .success-message,
  .error-message {
    padding: 1rem;
    margin-bottom: 1rem;
    border-radius: 4px;
    text-align: center;
  }
  .success-message {
    background-color: rgba(46, 204, 113, 0.2);
    color: #2ecc71;
  }
  .error-message {
    background-color: rgba(231, 76, 60, 0.2);
    color: #e74c3c;
  }
  .series-details {
    background-color: var(--card-background);
    border-radius: 8px;
    margin-bottom: 1rem;
    border: 1px solid #333;
  }
  .series-details summary {
    padding: 1rem;
    font-size: 1.2rem;
    font-weight: bold;
    cursor: pointer;
  }
  .series-content {
    padding: 1.5rem;
    border-top: 1px solid #444;
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 2rem;
  }
  .series-info-and-forms {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  .current-cover {
    text-align: center;
  }
  .current-cover p {
    font-weight: bold;
    margin-bottom: 0.75rem;
  }
  .cover-preview-img {
    max-width: 180px;
    width: 100%;
    height: auto;
    border-radius: 8px;
    border: 2px solid #444;
  }
  .forms-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  .action-buttons-row {
    display: flex;
    gap: 1rem;
  }
  .action-buttons-row > .update-button-wrapper,
  .action-buttons-row > .form-group {
    flex: 1;
    margin-top: 0; /* Reset margin-top inherited from general button style */
  }
  .action-buttons-row > .update-button-wrapper > .update-series-button {
    width: 100%;
    font-weight: bold;
  }
  .action-buttons-row > .form-group > button {
    width: 100%; /* Ensure the toggle button takes full width within its flex item */
  }
  .admin-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
  }
  .admin-form input[type="text"], /* Aplicar solo a text inputs */
  .admin-form textarea,
  .admin-form input[type="file"] /* Aplicar también a file inputs */ {
    width: 100%;
    padding: 0.75rem;
    background-color: #333;
    border: 1px solid #555;
    color: var(--font-color);
    border-radius: 4px;
  }

  /* Estilo específico para input file para que no herede todo */
  .admin-form input[type='file'] {
    padding: 0.5rem; /* Ajustar padding si es necesario */
    line-height: 1.5; /* Ajustar línea para mejor apariencia */
  }

  .admin-form button {
    font-weight: bold;
  }
  button {
    padding: 0.75rem 1.5rem;
    background-color: var(--accent-color);
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 0.5rem;
    width: 100%;
  }
  .delete-btn {
    background-color: #c0392b;
    font-weight: bold;
  }
  .chapters-list {
    /* max-height: 600px; */ /* Considera si necesitas limitar la altura */
    overflow-y: auto;
    padding-right: 10px; /* Espacio para scrollbar si aparece */
    border: 1px solid #444; /* Borde alrededor de la lista */
    border-radius: 8px; /* Bordes redondeados */
    padding: 1rem; /* Padding interno */
    background-color: #2a2a2a; /* Fondo ligeramente diferente */
  }
  .chapters-list h3 {
    margin-bottom: 1rem;
    margin-top: 0; /* Reset margin top */
    padding-bottom: 0.5rem; /* Espacio bajo el título */
    border-bottom: 1px solid #555; /* Línea separadora */
  }
  .chapters-list ul {
    list-style: none;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    padding: 0;
    margin: 0; /* Reset margin */
  }
  .chapter-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem; /* Aumentar padding */
    border: 1px solid #444;
    border-radius: 6px; /* Bordes más redondeados */
    background-color: #333; /* Fondo para cada item */
  }
  .chapter-thumbnail-img {
    width: 50px; /* Ancho fijo */
    height: 75px; /* Alto fijo (proporción 2:3) */
    object-fit: cover; /* Asegura que la imagen cubra el área */
    border-radius: 4px; /* Bordes redondeados */
    flex-shrink: 0; /* Evitar que se encoja */
    border: 1px solid #555; /* Borde sutil */
  }
  .chapter-details-and-controls {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    gap: 0.5rem; /* Space between update form and thumbnail controls */
  }
  .update-chapter-form {
    flex-grow: 1;
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }
  .chapter-number-label {
    white-space: nowrap;
    font-weight: bold; /* Hacer número más visible */
    color: #ccc; /* Color gris claro */
  }
  .chapter-title-input {
    width: 100%;
    background-color: #444; /* Fondo un poco más claro */
    border: 1px solid #666; /* Borde un poco más claro */
    color: var(--font-color);
    border-radius: 4px;
    padding: 0.5rem;
  }
  .update-chapter-btn,
  .delete-chapter-btn {
    padding: 0;
    margin: 0;
    width: 30px; /* Ligeramente más pequeño */
    height: 30px; /* Ligeramente más pequeño */
    font-size: 1.1rem; /* Ligeramente más pequeño */
    flex-shrink: 0;
    line-height: 30px; /* Centrar icono */
    border-radius: 50%; /* Hacerlos redondos */
  }
  .update-chapter-btn {
    background-color: #27ae60;
  }
  .delete-chapter-btn {
    background-color: #c0392b;
  }
  .checkbox-group {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-top: 1rem;
  }
  .checkbox-group input[type='checkbox'] {
    width: auto;
    margin: 0;
    transform: scale(1.2);
  }
  .checkbox-group label {
    margin: 0;
    cursor: pointer;
  }
  .delete-btn {
    background-color: #c0392b;
    font-weight: bold;
  }
  .toggle-visibility-group {
    /* Removed explicit margin-top to rely on parent gap for consistent spacing */
  }
  .toggle-visibility-btn {
    padding: 0.75rem 1.5rem;
    border-radius: 4px;
    font-weight: bold;
    text-align: center;
    font-family: inherit;
    border: none;
    cursor: pointer;
    width: 100%;
    line-height: 1; /* Reset line-height */
  }
  .toggle-visibility-btn.is-hidden-true {
    background-color: #28a745; /* Green for "Show Series" */
    color: white;
  }
  .toggle-visibility-btn.is-hidden-true:hover {
    background-color: #218838;
  }
  .toggle-visibility-btn.is-hidden-false {
    background-color: #c0392b; /* Red for "Hide Series" */
    color: white;
  }
  .toggle-visibility-btn.is-hidden-false:hover {
    background-color: #a93226; /* Darker shade of #c0392b */
  }
  .chapter-thumbnail-controls {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    flex-wrap: wrap; /* Para que los elementos se ajusten en pantallas pequeñas */
  }
  .generate-thumbnail-btn {
    background-color: #3498db; /* Azul para generar */
    width: auto; /* Ajustar ancho */
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
    margin-top: 0; /* Reset margin */
  }
  .generate-thumbnail-btn.is-loading {
    background-color: #2980b9;
    cursor: not-allowed;
  }
  .generate-thumbnail-btn:disabled {
    background-color: #555;
    cursor: not-allowed;
  }
  .generate-thumbnail-btn:disabled:hover {
    background-color: #666;
  }
  .upload-thumbnail-input {
    width: auto; /* Ajustar ancho */
    flex-grow: 1; /* Para que ocupe el espacio restante */
    font-size: 0.9rem;
    padding: 0.5rem;
    margin-top: 0; /* Reset margin */
    line-height: 1.5;
  }
  /* Ajustes para los botones de capítulo existentes para que no se vean afectados */
  .update-chapter-btn,
  .delete-chapter-btn {
    margin-top: 0; /* Eliminar el margin-top que afecta a todos los botones */
  }

  @media (max-width: 900px) {
    /* Aumentar breakpoint para mejor responsive */
    .series-content {
      grid-template-columns: 1fr; /* Cambiar a una columna antes */
    }
    .chapters-list {
      margin-top: 2rem;
      max-height: none; /* Quitar límite de altura en móvil si lo prefieres */
    }
    .form-grid {
      grid-template-columns: 1fr;
    }
    .action-buttons-row {
      flex-direction: column; /* Apilar botones en móvil */
    }
  }

  @media (max-width: 600px) {
    /* Estilos adicionales para pantallas más pequeñas */
    .chapter-item {
      flex-direction: column; /* Apilar elementos del capítulo */
      align-items: flex-start; /* Alinear a la izquierda */
    }
    .update-chapter-form {
      width: 100%; /* Ocupar todo el ancho */
    }
    .chapter-thumbnail-controls {
      width: 100%;
    }
    .delete-chapter-btn {
      align-self: flex-end; /* Mover el botón de eliminar a la derecha */
      margin-top: -35px; /* Ajuste para que quede al lado */
    }
    .chapter-thumbnail-img {
      align-self: center; /* Centrar miniatura */
      margin-bottom: 0.5rem; /* Espacio bajo miniatura */
    }
  }

  /* --- ESTILOS PARA EL NUEVO BOTÓN Y MODAL DE RECORTE --- */
  .crop-thumbnail-btn {
    background-color: #e67e22; /* Naranja */
    width: auto;
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
    margin-top: 0; /* Asegurar que no herede margen */
  }
  .crop-thumbnail-btn:hover {
    background-color: #d35400;
  }

  .cropper-modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(5px);
    z-index: 2000;
    display: flex;
    justify-content: center;
    align-items: center;
    opacity: 1;
    transition: opacity 0.3s ease-in-out;
  }
  .cropper-modal-overlay.is-hidden {
    opacity: 0;
    pointer-events: none;
  }
  .cropper-modal-panel {
    background: var(--card-background);
    width: 90%;
    max-width: 900px; /* Más ancho para ver imágenes */
    max-height: 90vh;
    border-radius: 8px;
    display: flex;
    flex-direction: column;
    overflow: hidden; /* Evitar que el contenido se desborde */
  }
  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 1.5rem;
    border-bottom: 1px solid #444;
  }
  .modal-header h3 {
    margin: 0;
    font-size: 1.2rem;
  }
  .close-modal-btn {
    background: none;
    border: none;
    color: #aaa;
    font-size: 2rem;
    line-height: 1;
    cursor: pointer;
    padding: 0; /* Reset padding */
    width: auto; /* Reset width */
    margin-top: 0; /* Reset margin */
  }
  .modal-body {
    padding: 1.5rem;
    overflow-y: auto; /* Permitir scroll si el contenido es largo */
    flex-grow: 1;
  }
  .modal-footer {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    padding: 1rem 1.5rem;
    border-top: 1px solid #444;
  }
  .modal-btn {
    padding: 0.6rem 1.2rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: bold;
    width: auto; /* Reset width */
    margin-top: 0; /* Reset margin */
  }
  .cancel-btn {
    background-color: #555;
    color: white;
  }
  .confirm-btn {
    background-color: var(--accent-color);
    color: white;
  }
  .confirm-btn:disabled {
    background-color: #444;
    cursor: not-allowed;
  }

  /* Contenedor para Cropper */
  .img-container {
    max-height: 60vh; /* Limitar altura */
    margin-top: 1rem;
    background-color: #222; /* Fondo oscuro para la imagen */
  }

  #cropper-image {
    display: block;
    max-width: 100%; /* Asegura que la imagen no se desborde */
    /* Cropper.js gestionará la altura */
  }

  /* Estilos específicos de Cropper.js */
  .cropper-view-box,
  .cropper-face {
    border-radius: 4px; /* Bordes redondeados para el área de recorte */
    outline: rgba(255, 255, 255, 0.75) solid 1px; /* Mejorar visibilidad */
    outline-offset: -1px;
  }
  .cropper-line {
    background-color: rgba(255, 255, 255, 0.7); /* Líneas más visibles */
  }
  .cropper-point {
    background-color: rgba(255, 255, 255, 0.9); /* Puntos más visibles */
    opacity: 0.75;
    width: 10px; /* Puntos un poco más grandes */
    height: 10px;
  }

  /* Grid para selección de imágenes */
  .image-selection-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
    gap: 1rem;
    margin-top: 1rem;
    max-height: 40vh; /* Limitar altura para que no ocupe todo */
    overflow-y: auto;
    padding: 5px; /* Pequeño padding para que no pegue a los bordes */
    background-color: #2a2a2a; /* Fondo para el grid */
    border-radius: 4px;
  }
  .image-selection-grid img {
    width: 100%;
    height: auto;
    aspect-ratio: 2 / 3;
    object-fit: cover;
    border-radius: 4px;
    cursor: pointer;
    border: 3px solid transparent; /* Borde más grueso */
    transition:
      border-color 0.2s,
      transform 0.2s;
  }
  .image-selection-grid img:hover {
    border-color: var(--accent-color);
    transform: scale(1.05); /* Efecto hover */
  }
  #image-selection-message {
    font-weight: bold;
    margin-bottom: 0.5rem;
  }
</style>

<script>
  import Cropper from 'cropperjs'; // Importar Cropper al inicio

  document.addEventListener('DOMContentLoaded', () => {
    // Código existente para .toggle-visibility-btn
    document
      .querySelectorAll('.toggle-visibility-btn')
      .forEach((buttonElement) => {
        const button = buttonElement as HTMLButtonElement; // Asegurar tipo HTMLButtonElement
        button.addEventListener('click', () => {
          const seriesId = button.dataset.seriesId;
          const currentIsHidden = button.dataset.isHidden === 'true';
          const newIsHidden = !currentIsHidden;

          const form = button.closest('form');
          if (form) {
            const hiddenInput = form.querySelector(
              `#is_hidden_input-${seriesId}`
            );
            if (hiddenInput instanceof HTMLInputElement) {
              // El valor del hidden input debe ser 'on' o cualquier otra cosa (como 'off' o vacío)
              // para que el backend lo interprete correctamente como booleano (checkbox).
              hiddenInput.value = newIsHidden ? 'on' : 'off';
            }

            // Actualizar botón
            button.dataset.isHidden = newIsHidden.toString();
            button.textContent = newIsHidden
              ? 'Mostrar Serie'
              : 'Ocultar Serie';
            button.classList.toggle('is-hidden-true', newIsHidden);
            button.classList.toggle('is-hidden-false', !newIsHidden);

            // Enviar formulario (esto recargará la página)
            // Necesitamos enviar la petición AJAX en lugar de submit
            fetch('/api/series/toggle-visibility', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                seriesId: parseInt(seriesId!),
                isHidden: newIsHidden,
              }),
            })
              .then((response) => {
                if (!response.ok) {
                  alert('Error al cambiar la visibilidad.');
                  // Revertir cambios visuales si falla
                  button.dataset.isHidden = currentIsHidden.toString();
                  button.textContent = currentIsHidden
                    ? 'Mostrar Serie'
                    : 'Ocultar Serie';
                  button.classList.toggle('is-hidden-true', currentIsHidden);
                  button.classList.toggle('is-hidden-false', !currentIsHidden);
                  if (hiddenInput instanceof HTMLInputElement) {
                    hiddenInput.value = currentIsHidden ? 'on' : 'off';
                  }
                }
                // No hacer nada en éxito, el estado visual ya se actualizó
              })
              .catch(() => {
                alert('Error de red al cambiar la visibilidad.');
                // Revertir cambios visuales si falla
                button.dataset.isHidden = currentIsHidden.toString();
                button.textContent = currentIsHidden
                  ? 'Mostrar Serie'
                  : 'Ocultar Serie';
                button.classList.toggle('is-hidden-true', currentIsHidden);
                button.classList.toggle('is-hidden-false', !currentIsHidden);
                if (hiddenInput instanceof HTMLInputElement) {
                  hiddenInput.value = currentIsHidden ? 'on' : 'off';
                }
              });

            // form.submit(); // Evitar el submit tradicional
          }
        });
      });

    // --- INICIO CÓDIGO NUEVO PARA RECORTADOR ---

    const cropperModal = document.getElementById(
      'cropper-modal'
    ) as HTMLElement;
    const closeCropperBtn = document.getElementById('close-cropper-modal-btn');
    const cropperImage = document.getElementById(
      'cropper-image'
    ) as HTMLImageElement;
    const imageSelectionContainer = document.getElementById(
      'image-selection-container'
    );
    const cropperContainer = document.getElementById('cropper-container');
    const confirmCropBtn = document.getElementById(
      'confirm-crop-btn'
    ) as HTMLButtonElement;
    const cancelCropBtn = document.getElementById('cancel-crop-btn');
    const cropperErrorEl = document.getElementById(
      'cropper-error'
    ) as HTMLElement; // Asegurar tipo
    const imageSelectionMessage = document.getElementById(
      'image-selection-message'
    );
    const cropperChapterNumberSpan = document.getElementById(
      'cropper-chapter-number'
    );

    let cropperInstance: Cropper | null = null;
    let currentChapterId: string | null = null;
    // let selectedImageBlob: Blob | null = null; // No necesitamos guardarlo globalmente

    // Función para cerrar y resetear el modal
    const closeCropperModal = () => {
      if (cropperInstance) {
        cropperInstance.destroy();
        cropperInstance = null;
      }
      if (cropperModal) cropperModal.classList.add('is-hidden');
      if (cropperImage) cropperImage.src = ''; // Limpiar imagen
      if (imageSelectionContainer) imageSelectionContainer.innerHTML = ''; // Limpiar selección
      if (cropperContainer) cropperContainer.style.display = 'none'; // Ocultar cropper
      if (imageSelectionContainer)
        imageSelectionContainer.style.display = 'block'; // Mostrar selección
      if (imageSelectionMessage) imageSelectionMessage.style.display = 'block';
      if (confirmCropBtn) {
        confirmCropBtn.disabled = true; // Deshabilitar confirmación
        confirmCropBtn.textContent = 'Confirmar Recorte'; // Resetear texto
      }
      if (cropperErrorEl) cropperErrorEl.style.display = 'none'; // Ocultar errores
      currentChapterId = null;
      // selectedImageBlob = null; // No es necesario resetearlo aquí
    };

    // Eventos para cerrar el modal
    closeCropperBtn?.addEventListener('click', closeCropperModal);
    cancelCropBtn?.addEventListener('click', closeCropperModal);
    cropperModal?.addEventListener('click', (e) => {
      if (e.target === cropperModal) {
        closeCropperModal();
      }
    });

    // Event listener para TODOS los botones "Recortar Portada"
    document
      .querySelectorAll('.crop-thumbnail-btn')
      .forEach((buttonElement) => {
        const button = buttonElement as HTMLButtonElement;
        button.addEventListener('click', async () => {
          currentChapterId = button.dataset.chapterId ?? null;
          const seriesSlug = button.dataset.seriesSlug;
          const chapterNumber = button.dataset.chapterNumber;

          if (!currentChapterId || !seriesSlug || !chapterNumber) {
            alert('Error: Faltan datos del capítulo.');
            return;
          }

          if (cropperChapterNumberSpan)
            cropperChapterNumberSpan.textContent = chapterNumber;
          if (cropperErrorEl) cropperErrorEl.style.display = 'none';
          if (imageSelectionContainer)
            imageSelectionContainer.innerHTML = 'Cargando imágenes...'; // Mensaje de carga

          if (cropperModal) cropperModal.classList.remove('is-hidden');

          // 1. Obtener las URLs de las imágenes del capítulo
          try {
            const response = await fetch(
              `/api/series/${seriesSlug}/${chapterNumber}`
            );
            if (!response.ok) {
              throw new Error(
                `Error al obtener imágenes: ${response.statusText}`
              );
            }
            const data = await response.json();

            // Verificar si hay un error en la respuesta de la API (ej. capítulo procesando)
            if (response.status === 202 || data.error) {
              throw new Error(
                data.message ||
                  data.error ||
                  'El capítulo aún se está procesando o no se pudo cargar.'
              );
            }

            const imageUrls = data.imageUrls as string[] | undefined; // Hacerlo opcional

            if (!imageUrls || imageUrls.length === 0) {
              throw new Error('No se encontraron imágenes para este capítulo.');
            }

            // 2. Mostrar las imágenes para seleccionar
            if (imageSelectionContainer) {
              imageSelectionContainer.innerHTML = ''; // Limpiar mensaje de carga
              imageUrls.forEach((url, index) => {
                const img = document.createElement('img');
                img.src = url;
                img.alt = `Página ${index + 1}`;
                img.loading = 'lazy';
                // img.dataset.imageUrl = url; // No es necesario guardar la URL aquí
                img.addEventListener('click', () => {
                  // Resaltar imagen seleccionada (opcional)
                  imageSelectionContainer
                    .querySelectorAll('img')
                    .forEach((el) => el.classList.remove('selected'));
                  img.classList.add('selected');

                  // Ocultar selección y mostrar cropper
                  if (imageSelectionContainer)
                    imageSelectionContainer.style.display = 'none';
                  if (imageSelectionMessage)
                    imageSelectionMessage.style.display = 'none';
                  if (cropperContainer)
                    cropperContainer.style.display = 'block';

                  // Destruir instancia anterior si existe
                  if (cropperInstance) {
                    cropperInstance.destroy();
                  }

                  // Iniciar Cropper.js
                  if (cropperImage) {
                    cropperImage.src = url; // Cargar la imagen seleccionada en el elemento img del modal
                    // Asegurarse de que la imagen se cargue antes de inicializar cropper
                    cropperImage.onload = () => {
                      // Cast options to any to avoid TypeScript errors about unknown properties
                      cropperInstance = new Cropper(cropperImage, {
                        aspectRatio: 2 / 3, // Forzar relación de aspecto 2:3
                        viewMode: 1, // Restringir el recorte al lienzo
                        autoCropArea: 0.8, // Área inicial de recorte
                        movable: true,
                        zoomable: true,
                        rotatable: false,
                        scalable: false,
                        background: false, // Fondo transparente detrás
                        ready: () => {
                          if (confirmCropBtn) confirmCropBtn.disabled = false; // Habilitar botón de confirmar
                        },
                      } as any);
                    };
                    cropperImage.onerror = () => {
                      // Manejo de error si la imagen no carga
                      if (cropperErrorEl) {
                        cropperErrorEl.textContent =
                          'Error al cargar la imagen seleccionada.';
                        cropperErrorEl.style.display = 'block';
                      }
                      if (confirmCropBtn) confirmCropBtn.disabled = true;
                    };
                  }
                });
                imageSelectionContainer.appendChild(img);
              });
            }
          } catch (error) {
            if (cropperErrorEl && imageSelectionContainer) {
              cropperErrorEl.textContent =
                error instanceof Error
                  ? error.message
                  : 'Error desconocido cargando imágenes.';
              cropperErrorEl.style.display = 'block';
              imageSelectionContainer.innerHTML = ''; // Limpiar
            }
            console.error('Error fetching/processing chapter images:', error);
          }
        });
      });

    // Event listener para el botón "Confirmar Recorte"
    confirmCropBtn?.addEventListener('click', () => {
      if (!cropperInstance || !currentChapterId) return;

      confirmCropBtn.disabled = true; // Deshabilitar mientras procesa
      confirmCropBtn.textContent = 'Procesando...';
      if (cropperErrorEl) cropperErrorEl.style.display = 'none';

      try {
        // Añadir try-catch para errores síncronos de Cropper
        // Obtener el canvas recortado con dimensiones específicas (ej. 200px de ancho, altura proporcional)
        const canvas = cropperInstance.getCroppedCanvas({
          width: 200, // Ancho deseado para la miniatura
          // height: 300, // Cropper calculará la altura basado en aspectRatio
          imageSmoothingEnabled: true, // Habilitar suavizado
          imageSmoothingQuality: 'medium', // Calidad media (balance)
        });

        if (!canvas) {
          throw new Error('No se pudo generar el canvas recortado.');
        }

        // Convertir canvas a Blob (archivo en memoria)
        const blob = await new Promise<Blob | null>((resolve) => {
          canvas.toBlob((b) => resolve(b), 'image/webp', 0.85);
        });

        if (!blob) {
          throw new Error('Error al convertir la imagen recortada a Blob.');
        }

        // Crear FormData y enviar al endpoint existente
        const formData = new FormData();
        formData.append('chapterId', currentChapterId!); // Sabemos que no es null aquí
            // Usamos un nombre de archivo genérico, el backend creará uno único
            formData.append(
              'thumbnailImage',
              blob,
              `thumbnail-${currentChapterId}.webp`
            );

            try {
              const response = await fetch('/api/upload-chapter-thumbnail', {
                method: 'POST',
                body: formData, // No necesita headers 'Content-Type', el navegador lo pone con FormData
              });

              const result = await response.json();

              if (!response.ok) {
                throw new Error(
                  result.error ||
                    result.details ||
                    'Error en el servidor al subir la miniatura.'
                );
              }

              // Éxito: Actualizar la imagen en la página principal y cerrar modal
              const chapterItem = document
                .querySelector(
                  `.chapter-item button.crop-thumbnail-btn[data-chapter-id="${currentChapterId}"]`
                )
                ?.closest('.chapter-item');
              const imgElement = chapterItem?.querySelector(
                '.chapter-thumbnail-img'
              ) as HTMLImageElement | null; // Hacer null-check
              if (imgElement && result.thumbnailUrl) {
                // Añadimos un timestamp para forzar la recarga de la imagen si la URL es la misma
                imgElement.src = `${result.thumbnailUrl}?t=${Date.now()}`;
              }
              alert('Miniatura actualizada con éxito!');
              closeCropperModal();
            } catch (uploadError) {
              if (cropperErrorEl) {
                cropperErrorEl.textContent =
                  uploadError instanceof Error
                    ? uploadError.message
                    : 'Error desconocido al subir.';
                cropperErrorEl.style.display = 'block';
              }
              console.error('Error uploading thumbnail:', uploadError);
            } finally {
              // Asegurarse de rehabilitar el botón incluso si falla la subida
              if (confirmCropBtn) {
                confirmCropBtn.disabled = false;
                confirmCropBtn.textContent = 'Confirmar Recorte';
              }
            }
          },
          'image/webp',
          0.85
        ); // Exportar como WebP con calidad 85%
      } catch (cropError) {
        // Capturar errores del propio Cropper.js
        if (cropperErrorEl) {
          cropperErrorEl.textContent =
            cropError instanceof Error
              ? cropError.message
              : 'Error al generar el recorte.';
          cropperErrorEl.style.display = 'block';
        }
        console.error('Error during cropping:', cropError);
        // Rehabilitar botón si falla el recorte
        if (confirmCropBtn) {
          confirmCropBtn.disabled = false;
          confirmCropBtn.textContent = 'Confirmar Recorte';
        }
      }
    });

    // --- FIN CÓDIGO NUEVO PARA RECORTADOR ---

    // --- INICIO CÓDIGO PARA SUBIDA MANUAL (EXISTENTE PERO MEJORADO) ---
    document
      .querySelectorAll('.upload-thumbnail-input')
      .forEach((inputElement) => {
        const input = inputElement as HTMLInputElement;
        input.addEventListener('change', async (event) => {
          const target = event.target as HTMLInputElement;
          const file = target.files?.[0];
          const chapterId = target.dataset.chapterId;

          if (!file || !chapterId) {
            return;
          }

          const formData = new FormData();
          formData.append('chapterId', chapterId);
          formData.append('thumbnailImage', file);

          // Podrías añadir feedback visual aquí (ej. "Subiendo...")
          target.disabled = true; // Deshabilitar mientras sube

          try {
            const response = await fetch('/api/upload-chapter-thumbnail', {
              method: 'POST',
              body: formData,
            });
            const result = await response.json();

            if (!response.ok) {
              throw new Error(
                result.error || result.details || 'Error al subir la miniatura.'
              );
            }

            // Éxito: Actualizar imagen y mostrar mensaje
            const chapterItem = target.closest('.chapter-item');
            const imgElement = chapterItem?.querySelector(
              '.chapter-thumbnail-img'
            ) as HTMLImageElement | null;
            if (imgElement && result.thumbnailUrl) {
              imgElement.src = `${result.thumbnailUrl}?t=${Date.now()}`;
            }
            alert('Miniatura subida y actualizada con éxito!');
          } catch (error) {
            alert(
              `Error al subir: ${error instanceof Error ? error.message : 'Error desconocido'}`
            );
            console.error('Error uploading manual thumbnail:', error);
          } finally {
            target.disabled = false; // Rehabilitar input
            target.value = ''; // Resetear el input file para permitir subir el mismo archivo de nuevo
          }
        });
      });
    // --- FIN CÓDIGO PARA SUBIDA MANUAL ---
  }); // Cierre del addEventListener 'DOMContentLoaded'
</script>
