---
// src/pages/admin/series.astro
import Layout from '../../layouts/Layout.astro';

const sessionCookie = Astro.cookies.get('session');
if (sessionCookie?.value !== 'admin-logged-in') {
  return Astro.redirect('/admin-login');
}

const r2PublicUrlAssets = Astro.locals.runtime.env.R2_PUBLIC_URL_ASSETS;

interface Chapter {
  id: number;
  chapter_number: number;
  title: string | null;
  telegram_file_id: string; // Añadido para la generación de miniaturas
  url_portada: string | null; // URL de la portada del capítulo
}
interface Series {
  id: number;
  title: string;
  description: string;
  cover_image_url: string;
  slug: string;
  chapters: Chapter[];
  status: string | null;
  type: string | null;
  genres: string | null;
  author: string | null;
  artist: string | null;
  published_by: string | null;
  alternative_names: string | null;
  serialized_by: string | null;
  is_hidden: boolean; // Added for visibility control
}

let allSeries: Series[] = [];
const success = Astro.url.searchParams.get('success');
let error = Astro.url.searchParams.get('error');

try {
  const response = await fetch(
    new URL('/api/admin/series-with-chapters', Astro.url),
    {
      headers: { Cookie: `session=${sessionCookie.value}` },
    }
  );

  if (response.ok) {
    allSeries = await response.json();
  } else {
    error = `Error al cargar las series: ${response.statusText}`;
  }
} catch (e) {
  console.error(e);
  error = 'No se pudo conectar con la API para cargar las series.';
}
---

<Layout title="Gestionar Series">
  <main class="admin-container">
    <a href="/admin" class="back-link">&larr; Volver al Panel</a>
    <h1>Gestionar Series y Capítulos</h1>

    {success && <p class="success-message">{success}</p>}
    {error && <p class="error-message">{error}</p>}

    {
      allSeries.length > 0 ? (
        allSeries.map((series) => (
          <details class="series-details">
            <summary>{series.title}</summary>
            <div class="series-content">
              <div class="series-info-and-forms">
                <div class="current-cover">
                  <p>Portada Actual</p>
                  <img
                    src={series.cover_image_url}
                    alt={`Portada de ${series.title}`}
                    class="cover-preview-img"
                  />
                </div>

                <div class="forms-container">
                  <form
                    action="/api/update-series"
                    method="post"
                    enctype="multipart/form-data"
                    class="admin-form"
                    id={`update-series-form-${series.id}`}
                  >
                    <input type="hidden" name="seriesId" value={series.id} />
                    <div class="form-group">
                      <>
                        <label for={`title-${series.id}`}>Título</label>
                        <input
                          type="text"
                          id={`title-${series.id}`}
                          name="title"
                          value={series.title}
                          required
                        />
                      </>
                    </div>
                    <div class="form-group">
                      <>
                        <label for={`desc-${series.id}`}>Descripción</label>
                                                <textarea
                                                  id={`desc-${series.id}`}
                                                  name="description"
                                                  rows="4"
                                                  required
                                                >{series.description.trim()}</textarea>
                      </>
                    </div>

                    <div class="form-grid">
                      <div class="form-group">
                        <>
                          <label for={`status-${series.id}`}>Estado</label>
                          <input
                            type="text"
                            id={`status-${series.id}`}
                            name="status"
                            value={series.status || ''}
                            placeholder="Ej: En emisión"
                          />
                        </>
                      </div>
                      <div class="form-group">
                        <>
                          <label for={`type-${series.id}`}>Tipo</label>
                          <input
                            type="text"
                            id={`type-${series.id}`}
                            name="type"
                            value={series.type || ''}
                            placeholder="Ej: Manga"
                          />
                        </>
                      </div>
                      <div class="form-group">
                        <>
                          <label for={`author-${series.id}`}>Autor</label>
                          <input
                            type="text"
                            id={`author-${series.id}`}
                            name="author"
                            value={series.author || ''}
                            placeholder="Autor de la obra"
                          />
                        </>
                      </div>
                      <div class="form-group">
                        <>
                          <label for={`artist-${series.id}`}>Artista</label>
                          <input
                            type="text"
                            id={`artist-${series.id}`}
                            name="artist"
                            value={series.artist || ''}
                            placeholder="Artista de la obra"
                          />
                        </>
                      </div>
                      <div class="form-group">
                        <>
                          <label for={`published_by-${series.id}`}>
                            Publicado por
                          </label>
                          <input
                            type="text"
                            id={`published_by-${series.id}`}
                            name="published_by"
                            value={series.published_by || ''}
                            placeholder="Ej: Shueisha"
                          />
                        </>
                      </div>
                      <div class="form-group">
                        <>
                          <label for={`serialized_by-${series.id}`}>
                            Serializado por
                          </label>
                          <input
                            type="text"
                            id={`serialized_by-${series.id}`}
                            name="serialized_by"
                            value={series.serialized_by || ''}
                            placeholder="Ej: Weekly Shōnen Jump"
                          />
                        </>
                      </div>
                    </div>
                    <div class="form-group">
                      <label for={`genres-${series.id}`}>
                        Géneros (separados por coma)
                      </label>
                      <input
                        type="text"
                        id={`genres-${series.id}`}
                        name="genres"
                        value={series.genres || ''}
                        placeholder="Ej: Acción, Aventura"
                      />
                    </div>
                    <div class="action-buttons-row">
                      <div class="update-button-wrapper">
                        <button type="submit" form={`update-series-form-${series.id}`} class="update-series-button">Actualizar Serie</button>
                      </div>

                      <div class="form-group toggle-visibility-group">
                        <input
                          type="hidden"
                          id={`is_hidden_input-${series.id}`}
                          name="is_hidden"
                          value={series.is_hidden ? 'on' : 'off'}
                        />
                        <button
                          type="button"
                          class:list={[
                            'toggle-visibility-btn',
                            { 'is-hidden-true': series.is_hidden },
                            { 'is-hidden-false': !series.is_hidden },
                          ]}
                          data-series-id={series.id}
                          data-is-hidden={series.is_hidden}
                        >
                          {series.is_hidden ? 'Mostrar Serie' : 'Ocultar Serie'}
                        </button>
                      </div>
                    </div>
                  </form>

                  <form
                    action="/api/delete-series"
                    method="post"
                    onsubmit="return confirm('¿Estás seguro de que quieres eliminar TODA la serie?\\nEsta acción no se puede deshacer.');"
                  >
                    <input type="hidden" name="seriesId" value={series.id} />
                    <button type="submit" class="delete-btn">
                      Eliminar Serie Completa
                    </button>
                  </form>
                </div>
              </div>
              <div class="chapters-list">
                <h3>Capítulos ({series.chapters.length})</h3>
                {series.chapters.length > 0 ? (
                  <ul>
                    {series.chapters.map((chapter) => (
                      <li class="chapter-item">
                        <img
                          src={chapter.url_portada || `${r2PublicUrlAssets}/covers/placeholder-chapter.jpg`}
                          alt={`Miniatura del Capítulo ${chapter.chapter_number}`}
                          class="chapter-thumbnail-img"
                          onerror="this.onerror=null;this.src='${r2PublicUrlAssets}/covers/placeholder-chapter.jpg';"
                        />
                        <div class="chapter-details-and-controls">
                          <form
                            action="/api/update-chapter"
                            method="post"
                            class="update-chapter-form"
                          >
                            <span class="chapter-number-label">
                              Cap. {chapter.chapter_number}
                            </span>

                            <input
                              type="text"
                              name="title"
                              value={chapter.title || ''}
                              placeholder="Sin título"
                              class="chapter-title-input"
                            />
                            <input
                              type="hidden"
                              name="chapterId"
                              value={chapter.id}
                            />
                            <button
                              type="submit"
                              class="update-chapter-btn"
                              title="Guardar Título"
                            >
                              ✓
                            </button>
                          </form>

                          <div class="chapter-thumbnail-controls">
                                                                                <button
                                                                                  type="button"
                                                                                  class="generate-thumbnail-btn"
                                                                                  data-chapter-id={chapter.id}
                                                                                  data-telegram-file-id={chapter.telegram_file_id}
                                                                                  data-series-slug={series.slug}
                                                                                  data-chapter-number={chapter.chapter_number}
                                                                                  title="Generar Miniatura Automáticamente"
                                                                                  disabled={!chapter.telegram_file_id}
                                                                                >                              Generar Miniatura
                            </button>
                            <input
                              type="file"
                              class="upload-thumbnail-input"
                              data-chapter-id={chapter.id}
                              accept="image/jpeg,image/png,image/webp"
                              title="Subir Miniatura Manualmente"
                            />
                          </div>
                        </div>

                        <form
                          action="/api/delete-chapters"
                          method="post"
                          onsubmit="return confirm('¿Seguro que quieres eliminar este capítulo?');"
                        >
                          <input
                            type="hidden"
                            name="chapterId"
                            value={chapter.id}
                          />
                          <button
                            type="submit"
                            class="delete-chapter-btn"
                            title="Eliminar Capítulo"
                          >
                            ✗
                          </button>
                        </form>
                      </li>
                    ))}
                  </ul>
                ) : (
                  <p>No hay capítulos para esta serie.</p>
                )}
              </div>
            </div>
          </details>
        ))
      ) : (
        <p>No se encontraron series para mostrar.</p>
      )
    }
  </main>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      document
        .querySelectorAll('.toggle-visibility-btn')
        .forEach((buttonElement) => {
          const button = buttonElement as HTMLElement;
          button.addEventListener('click', () => {
            const seriesId = button.dataset.seriesId;
            const currentIsHidden = button.dataset.isHidden === 'true';
            const newIsHidden = !currentIsHidden;

            const form = button.closest('form');
            if (form) {
              const hiddenInput = form.querySelector(
                `#is_hidden_input-${seriesId}`
              );
              if (hiddenInput instanceof HTMLInputElement) {
                hiddenInput.value = newIsHidden ? 'on' : 'off';
              }
              // Update button text and classes immediately for visual feedback
              button.dataset.isHidden = newIsHidden.toString();
              button.textContent = newIsHidden
                ? 'Mostrar serie'
                : 'Ocultar serie';
              button.classList.toggle('is-hidden-true', newIsHidden);
              button.classList.toggle('is-hidden-false', !newIsHidden);

              // Submit the form
              form.submit();
            }
          });
        });

      document
        .querySelectorAll('.generate-thumbnail-btn')
        .forEach((buttonElement) => {
          const button = buttonElement as HTMLButtonElement;
          button.addEventListener('click', async () => {
            const chapterId = button.dataset.chapterId;
            const telegramFileId = button.dataset.telegramFileId;
            const seriesSlug = button.dataset.seriesSlug;
            const chapterNumber = button.dataset.chapterNumber;

            if (!chapterId || !telegramFileId || !seriesSlug || !chapterNumber) {
              alert('Error: Faltan datos para generar la miniatura.');
              return;
            }

            button.disabled = true;
            button.textContent = 'Generando...';
            button.classList.add('is-loading');

            try {
              const response = await fetch('/api/generate-chapter-thumbnail', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  chapterId: parseInt(chapterId),
                  telegramFileId,
                  seriesSlug,
                  chapterNumber: parseFloat(chapterNumber),
                }),
              });

              const result = await response.json();

              if (response.ok) {
                alert('Miniatura generada y actualizada con éxito!');
                // Update the image src on the page
                const imgElement = button.closest('.chapter-item')?.querySelector('.chapter-thumbnail-img') as HTMLImageElement;
                if (imgElement && result.thumbnailUrl) {
                  imgElement.src = result.thumbnailUrl;
                }
              } else {
                alert(`Error al generar miniatura: ${result.details || result.error}`);
              }
            } catch (error) {
              console.error('Error al generar miniatura:', error);
              alert('Error de red o interno al generar miniatura.');
            } finally {
              button.disabled = false;
              button.textContent = 'Generar Miniatura';
              button.classList.remove('is-loading');
            }
          });
        });
    });
  </script>
</Layout>

<style>
  .form-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
  }
  .admin-container {
    padding: 2rem;
    max-width: 1350px;
    margin: 0 auto;
  }
  h1 {
    margin-bottom: 1.5rem;
  }
  .back-link {
    display: inline-block;
    margin-bottom: 1.5rem;
    color: var(--accent-color);
  }
  .success-message,
  .error-message {
    padding: 1rem;
    margin-bottom: 1rem;
    border-radius: 4px;
    text-align: center;
  }
  .success-message {
    background-color: rgba(46, 204, 113, 0.2);
    color: #2ecc71;
  }
  .error-message {
    background-color: rgba(231, 76, 60, 0.2);
    color: #e74c3c;
  }
  .series-details {
    background-color: var(--card-background);
    border-radius: 8px;
    margin-bottom: 1rem;
    border: 1px solid #333;
  }
  .series-details summary {
    padding: 1rem;
    font-size: 1.2rem;
    font-weight: bold;
    cursor: pointer;
  }
  .series-content {
    padding: 1.5rem;
    border-top: 1px solid #444;
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 2rem;
  }
  .series-info-and-forms {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  .current-cover {
    text-align: center;
  }
  .current-cover p {
    font-weight: bold;
    margin-bottom: 0.75rem;
  }
  .cover-preview-img {
    max-width: 180px;
    width: 100%;
    height: auto;
    border-radius: 8px;
    border: 2px solid #444;
  }
  .forms-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .action-buttons-row {
    display: flex;
    gap: 1rem;
  }

  .action-buttons-row > .update-button-wrapper,
  .action-buttons-row > .form-group {
    flex: 1;
    margin-top: 0; /* Reset margin-top inherited from general button style */
  }

  .action-buttons-row > .update-button-wrapper > .update-series-button {
    width: 100%;
    font-weight: bold;
  }

  .action-buttons-row > .form-group > button {
    width: 100%; /* Ensure the toggle button takes full width within its flex item */
  }
  .admin-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
  }
  .admin-form input,
  .admin-form textarea {
    width: 100%;
    padding: 0.75rem;
    background-color: #333;
    border: 1px solid #555;
    color: var(--font-color);
    border-radius: 4px;
  }
  .admin-form button {
    font-weight: bold;
  }
  .admin-form button {
    font-weight: bold;
  }
  button {
    padding: 0.75rem 1.5rem;
    background-color: var(--accent-color);
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 0.5rem;
    width: 100%;
  }
  .delete-btn {
    background-color: #c0392b;
    font-weight: bold;
  }
  .chapters-list {
    overflow-y: auto;
    padding-right: 10px;
  }
  .chapters-list h3 {
    margin-bottom: 1rem;
  }
  .chapters-list ul {
    list-style: none;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    padding: 0;
  }
  .chapter-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.5rem 0.75rem;
    border: 1px solid #444;
    border-radius: 4px;
  }

  .chapter-details-and-controls {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    gap: 0.5rem; /* Space between update form and thumbnail controls */
  }

  .update-chapter-form {
    flex-grow: 1;
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }
  .chapter-number-label {
    white-space: nowrap;
  }
  .chapter-title-input {
    width: 100%;
    background-color: #333;
    border: 1px solid #555;
    color: var(--font-color);
    border-radius: 4px;
    padding: 0.5rem;
  }
  .update-chapter-btn,
  .delete-chapter-btn {
    padding: 0;
    margin: 0;
    width: 32px;
    height: 32px;
    font-size: 1.2rem;
    flex-shrink: 0;
  }
  .update-chapter-btn {
    background-color: #27ae60;
  }
  .delete-chapter-btn {
    background-color: #c0392b;
  }
  .checkbox-group {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-top: 1rem;
  }

  .checkbox-group input[type='checkbox'] {
    width: auto;
    margin: 0;
    transform: scale(1.2);
  }

  .checkbox-group label {
    margin: 0;
    cursor: pointer;
  }

  .delete-btn {
    background-color: #c0392b;
    font-weight: bold;
  }

  .toggle-visibility-group {
    /* Removed explicit margin-top to rely on parent gap for consistent spacing */
  }

  .toggle-visibility-btn {
    padding: 0.75rem 1.5rem;
    border-radius: 4px;
    font-weight: bold;
    text-align: center;
    font-family: inherit;
    border: none;
    cursor: pointer;
    width: 100%;
  }

  .toggle-visibility-btn.is-hidden-true {
    background-color: #28a745; /* Green for "Show Series" */
    color: white;
  }

  .toggle-visibility-btn.is-hidden-true:hover {
    background-color: #218838;
  }

  .toggle-visibility-btn.is-hidden-false {
    background-color: #c0392b; /* Red for "Hide Series" */
    color: white;
  }

  .toggle-visibility-btn.is-hidden-false:hover {
    background-color: #a93226; /* Darker shade of #c0392b */
  }

  .chapter-thumbnail-controls {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    flex-wrap: wrap; /* Para que los elementos se ajusten en pantallas pequeñas */
  }
  .generate-thumbnail-btn {
    background-color: #3498db; /* Azul para generar */
    width: auto; /* Ajustar ancho */
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
  }
  .generate-thumbnail-btn.is-loading {
    background-color: #2980b9;
    cursor: not-allowed;
  }

  .generate-thumbnail-btn:disabled {
    background-color: #555;
    cursor: not-allowed;
  }

  .generate-thumbnail-btn:disabled:hover {
    background-color: #666;
  }
  .upload-thumbnail-input {
    width: auto; /* Ajustar ancho */
    flex-grow: 1; /* Para que ocupe el espacio restante */
    font-size: 0.9rem;
    padding: 0.5rem;
  }
  /* Ajustes para los botones de capítulo existentes para que no se vean afectados */
  .update-chapter-btn,
  .delete-chapter-btn {
    margin-top: 0; /* Eliminar el margin-top que afecta a todos los botones */
  }

  @media (max-width: 768px) {
    .series-content {
      grid-template-columns: 1fr;
    }
    .chapters-list {
      margin-top: 2rem;
    }
    .form-grid {
      grid-template-columns: 1fr;
    }
  }
</style>