---
// src/components/Comments.astro
interface Comment {
  id: number;
  user_email: string;
  comment_text: string;
  created_at: string;
}

interface Props {
  chapterId: number;
  comments: Comment[];
  user?:
    | {
        uid: string;
        email?: string | null | undefined; // Añadido | undefined
      }
    | null
    | undefined; // Añadido | undefined
}

const { chapterId, comments = [], user = null } = Astro.props;

const COMMENTS_VISIBLE_LIMIT = 1;

// CORRECCIÓN: Se cambia el límite a 1

const formatCommentDate = (dateString: string) => {

  if (!dateString) return 'Fecha inválida';

  return new Date(dateString).toLocaleString('es-ES', {

    day: 'numeric',

    month: 'long',

    year: 'numeric',

    hour: '2-digit',

    minute: '2-digit',

  });

};---

<section class="comments-section">
  <h3>Comentarios (<span id="comment-count">{comments.length}</span>)</h3>

  {
    user ? (
      <form id="comment-form" class="comment-form">
        <textarea
          id="comment-text"
          placeholder="Escribe tu comentario aquí..."
          required
          minlength="1"
          maxlength="1000"
        />
        <div class="comment-form-actions">
          <span id="char-counter">0/1000</span>
          <button type="submit">Publicar</button>
        </div>
        <p id="comment-error" class="comment-error" style="display:none;" />
      </form>
    ) : (
      <p class="comment-login-prompt">
        {/* ✅ CAMBIO: 'a' a 'button' con 'data-open-modal' */}
        <button class="link-button" data-open-modal="login">
          Inicia sesión
        </button>{' '}
        para dejar un comentario.
      </p>
    )
  }

  <div id="comments-list" class="comments-list">
    {
      comments.length > 0 ? (
        comments.map((comment, index) => (
          <div
            class:list={[
              'comment',
              { 'is-hidden': index >= COMMENTS_VISIBLE_LIMIT },
            ]}
            id={`comment-${comment.id}`}
          >
            <div class="comment-author">{comment.user_email.split('@')[0]}</div>
            <p class="comment-body">{comment.comment_text}</p>
            <div class="comment-date">
              {formatCommentDate(comment.created_at)}
            </div>
          </div>
        ))
      ) : (
        <p id="no-comments-message" class="no-comments-message">
          Aún no hay comentarios. ¡Sé el primero!
        </p>
      )
    }
  </div>

  {
    comments.length > COMMENTS_VISIBLE_LIMIT && (
      <div class="read-more-container">
        <button id="read-more-btn" class="read-more-btn">
          Leer más
        </button>
      </div>
    )
  }
</section>

<div id="comments-modal" class="comments-modal-overlay is-hidden">
  <div class="comments-modal-panel">
    <div class="modal-header">
      <h3>Todos los Comentarios</h3>
      <button id="close-modal-btn" class="close-modal-btn">&times;</button>
    </div>
    <div id="modal-comments-list" class="modal-comments-list"></div>
  </div>
</div>

<script
  define:vars={{
    chapterId,
    comments,
    COMMENTS_VISIBLE_LIMIT,
    formatCommentDate,
  }}
>
  function initializeChapterComments() {
    const COMMENTS_VISIBLE_LIMIT = 1; // Define here
    const commentForm = document.getElementById('comment-form');
    if (commentForm instanceof HTMLFormElement) {
      const commentText = document.getElementById('comment-text');
      const charCounter = document.getElementById('char-counter');
      const commentError = document.getElementById('comment-error');
      const commentsList = document.getElementById('comments-list');
      const noCommentsMsg = document.getElementById('no-comments-message');
      const commentCountSpan = document.getElementById('comment-count');
      if (commentText instanceof HTMLTextAreaElement && charCounter) {
        commentText.addEventListener('input', () => {
          charCounter.textContent = `${commentText.value.length}/1000`;
        });
      }

      commentForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        if (
          !(commentText instanceof HTMLTextAreaElement) ||
          !chapterId ||
          !commentError
        )
          return;

        const text = commentText.value.trim();
        if (!text) return;

        commentError.style.display = 'none';

        try {
          const response = await fetch('/api/comments/add', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },

            body: JSON.stringify({ chapterId: chapterId, commentText: text }),
          });

          const newComment = await response.json();

          if (!response.ok)
            throw new Error(
              newComment.error || 'Error al publicar comentario.'
            );

          commentText.value = '';
          if (charCounter) charCounter.textContent = '0/1000';
          if (noCommentsMsg) noCommentsMsg.style.display = 'none';
          const commentEl = document.createElement('div');
          commentEl.className = 'comment';
          commentEl.id = `comment-${newComment.id}`;
          commentEl.innerHTML = `
                    <div class="comment-author">${newComment.user_email.split('@')[0]}</div>
                    <p class="comment-body">${newComment.comment_text}</p>
                    <div class="comment-date">${new Date(newComment.created_at).toLocaleString('es-ES', { day: 'numeric', month: 'long', year: 'numeric', hour: '2-digit', minute: '2-digit' })}</div>
                `;
          commentsList?.prepend(commentEl);
          if (commentCountSpan)
            commentCountSpan.textContent = (
              parseInt(commentCountSpan.textContent || '0') + 1
            ).toString();
        } catch (err) {
          if (err instanceof Error) {
            commentError.textContent = err.message;
            commentError.style.display = 'block';
          }
        }
      });
    }

    const readMoreBtn = document.getElementById('read-more-btn');
    const modal = document.getElementById('comments-modal');
    const closeModalBtn = document.getElementById('close-modal-btn');
    const modalCommentsList = document.getElementById('modal-comments-list');
    if (readMoreBtn && modal && closeModalBtn && modalCommentsList) {
      readMoreBtn.addEventListener('click', () => {
        modalCommentsList.innerHTML = '';
        comments.forEach((comment) => {
          const commentEl = document.createElement('div');
          commentEl.className = 'comment';

          commentEl.innerHTML = `
                    <div class="comment-author">${comment.user_email.split('@')[0]}</div>
                    <p class="comment-body">${comment.comment_text}</p>
                    <div class="comment-date">${formatCommentDate(comment.created_at)}</div>
   
             `;

          modalCommentsList.appendChild(commentEl);
        });
        modal.classList.remove('is-hidden');
      });
      const closeModal = () => modal.classList.add('is-hidden');
      closeModalBtn.addEventListener('click', closeModal);
      modal.addEventListener('click', (e) => {
        if (e.target === modal) closeModal();
      });
    }
  }

  document.addEventListener('astro:page-load', initializeChapterComments);
  initializeChapterComments();
</script>

<style>
  /* ✅ NUEVO ESTILO PARA EL BOTÓN-ENLACE */
  .link-button {
    background: none;
    border: none;
    padding: 0;
    color: var(--accent-color);
    text-decoration: underline;
    cursor: pointer;
    font-size: inherit;
    font-family: inherit;
  }
  .comments-section {
    width: 100%;
    margin: 3rem 0;
    padding: 2rem 0 0 0;
    border-top: 1px solid #444;
  }
  .comments-section h3 {
    font-size: 1.5rem;
    margin-bottom: 1.5rem;
  }
  .comment-form textarea {
    width: 100%;
    background: #2a2a2a;
    border: 1px solid #444;
    color: var(--font-color);
    padding: 0.75rem;
    border-radius: 6px;
    min-height: 100px;
    resize: vertical;
    margin-bottom: 0.5rem;
    font-family: inherit;
    font-size: 1rem;
  }
  .comment-form-actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  #char-counter {
    font-size: 0.8rem;
    color: #aaa;
  }
  .comment-form button {
    background-color: var(--accent-color);
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  .comment-form button:hover {
    background-color: #009acd;
  }
  .comment-error {
    color: #ff6b6b;
    font-size: 0.9rem;
    margin-top: 0.5rem;
    text-align: right;
  }
  .comment-login-prompt {
    text-align: center;
    color: #aaa;
    margin: 2rem 0;
    padding: 1rem;
    background-color: var(--card-background);
    border-radius: 8px;
  }
  .comment-login-prompt a {
    color: var(--accent-color);
    text-decoration: underline;
  }
  .comments-list {
    margin-top: 2rem;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  .comment {
    background-color: var(--card-background);
    padding: 1rem 1.25rem;
    border-radius: 8px;
    text-align: left;
    border-left: 3px solid var(--accent-color);
  }
  .comment-author {
    font-weight: bold;
    color: #eee;
    margin-bottom: 0.5rem;
  }
  .comment-body {
    color: #ddd;
    line-height: 1.6;
    white-space: pre-wrap;
    word-wrap: break-word;
  }
  .comment-date {
    font-size: 0.8rem;
    color: #888;
    margin-top: 1rem;
    text-align: right;
  }
  .no-comments-message {
    font-style: italic;
    color: #888;
  }
  .comment.is-hidden {
    display: none;
  }
  .read-more-container {
    text-align: right;
    margin-top: 1.5rem;
  }
  .read-more-btn {
    background-color: #333;
    color: var(--font-color);
    padding: 0.5rem 1.5rem;
    border: 1px solid #555;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  .read-more-btn:hover {
    background-color: #444;
  }
  .comments-modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(5px);
    z-index: 2000;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  .comments-modal-overlay.is-hidden {
    display: none;
  }
  .comments-modal-panel {
    background: var(--card-background);
    width: 90%;
    max-width: 700px;
    max-height: 80vh;
    border-radius: 8px;
    display: flex;
    flex-direction: column;
  }
  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 1.5rem;
    border-bottom: 1px solid #444;
  }
  .close-modal-btn {
    background: none;
    border: none;
    color: #aaa;
    font-size: 2rem;
    line-height: 1;
    cursor: pointer;
  }
  .modal-comments-list {
    overflow-y: auto;
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
</style>
