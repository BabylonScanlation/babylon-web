---
// src/components/SeriesComments.astro
interface Comment {
  id: number;
  user_email: string;
  comment_text: string;
  created_at: string;
}

interface Props {
  seriesId: number;
  comments: Comment[];
  user?:
    | {
        uid: string;
        email?: string | null | undefined; // Añadido | undefined
      }
    | null
    | undefined; // Añadido | undefined
}

const { seriesId, comments = [], user = null } = Astro.props;
const COMMENTS_VISIBLE_LIMIT = 1;
// Ya no necesitamos esta función aquí, la moveremos al script del cliente
---

<section class="comments-section">
  <div class="comments-header">
    <h3>
      Comentarios de la Serie (<span id="series-comment-count"
        >{comments.length}</span
      >)
    </h3>
    <div
      class="read-more-container"
      style={comments.length <= COMMENTS_VISIBLE_LIMIT ? 'display: none;' : ''}
    >
      <button id="series-read-more-btn" class="read-more-btn"
        >Ver todos los comentarios</button
      >
    </div>
  </div>

  {
    user ? (
      <form id="series-comment-form" class="comment-form">
        <textarea
          id="series-comment-text"
          placeholder="Escribe tu comentario sobre la serie..."
          required
          minlength="1"
          maxlength="1000"
        />
        <div class="comment-form-actions">
          <span id="series-char-counter">0/1000</span>
          <button type="submit">Publicar</button>
        </div>
        <p
          id="series-comment-error"
          class="comment-error"
          style="display:none;"
        />
      </form>
    ) : (
      <p class="comment-login-prompt">
        {/* ✅ CAMBIO: 'a' a 'button' con 'data-open-modal' */}
        <button class="link-button" data-open-modal="login">
          Inicia sesión
        </button>{' '}
        para comentar sobre esta serie.
      </p>
    )
  }

  <div id="series-comments-list" class="comments-list">
    {
      comments.length > 0 ? (
        comments.map((comment, index) => (
          <div
            class:list={[
              'comment',
              { 'is-hidden': index >= COMMENTS_VISIBLE_LIMIT },
            ]}
            id={`series-comment-${comment.id}`}
            data-user-email={comment.user_email}
          >
            <div class="comment-header">
              <div class="comment-meta">
                <span class="comment-author">
                  {comment.user_email.split('@')[0]}
                </span>
                <span class="comment-separator">|</span>

                {/* ✅ AÑADIMOS data-timestamp PARA GUARDAR LA FECHA UTC */}
                <span class="comment-date" data-timestamp={comment.created_at}>
                  Cargando fecha...
                </span>
              </div>
              {user && user.email === comment.user_email && (
                <div class="comment-actions" data-comment-id={comment.id}>
                  <button class="menu-btn" aria-label="Opciones de comentario">
                    •••
                  </button>

                  <div class="menu-dropdown is-hidden">
                    <button class="menu-item edit-btn">Editar</button>
                    <button class="menu-item delete-btn">Eliminar</button>
                  </div>
                </div>
              )}
            </div>
            <p class="comment-body">{comment.comment_text}</p>
          </div>
        ))
      ) : (
        <p id="series-no-comments-message" class="no-comments-message">
          Aún no hay comentarios. ¡Sé el primero!
        </p>
      )
    }
  </div>
</section>

<div id="series-comments-modal" class="comments-modal-overlay is-hidden">
  <div class="comments-modal-panel">
    <div class="modal-header">
      <h3>Todos los Comentarios</h3>
      <button id="series-close-modal-btn" class="close-modal-btn"
        >&times;</button
      >
    </div>
    <div id="series-modal-comments-list" class="modal-comments-list"></div>
  </div>
</div>

<script
  define:vars={{
    seriesId,
    initialComments: comments,
    COMMENTS_VISIBLE_LIMIT,
    user,
  }}
>
  let comments = [...initialComments];
  const formatCommentDate = (dateString) => {
    if (!dateString) return 'Fecha inválida';
    return new Date(dateString).toLocaleString('es-ES', {
      day: 'numeric',
      month: 'long',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  // ✅ NUEVA FUNCIÓN PARA FORMATEAR TODAS LAS FECHAS EN LA PÁGINA
  function formatAllDates() {
    document
      .querySelectorAll('.comment-date[data-timestamp]')
      .forEach((dateEl) => {
        const timestamp = dateEl.dataset.timestamp;
        if (timestamp) {
          dateEl.textContent = formatCommentDate(timestamp);
        }
      });
  }

  function updateCommentVisibility() {
    const commentsList = document.getElementById('series-comments-list');
    const readMoreContainer = document.querySelector('.read-more-container');
    if (!commentsList || !readMoreContainer) return;

    const allComments = commentsList.querySelectorAll('.comment');
    allComments.forEach((comment, index) => {
      comment.classList.toggle('is-hidden', index >= COMMENTS_VISIBLE_LIMIT);
    });
    readMoreContainer.style.display =
      allComments.length > COMMENTS_VISIBLE_LIMIT ? 'block' : 'none';
  }

  function createCommentElement(comment, currentUser) {
    const isOwner = currentUser && currentUser.email === comment.user_email;
    const authorName = comment.user_email.split('@')[0];
    const formattedDate = formatCommentDate(comment.created_at);

    const commentEl = document.createElement('div');
    commentEl.className = 'comment';
    commentEl.id = `series-comment-${comment.id}`;
    commentEl.dataset.userEmail = comment.user_email;
    commentEl.innerHTML = `
        <div class="comment-header">
          <div class="comment-meta">
            <span class="comment-author">${authorName}</span>
            <span class="comment-separator">|</span>
            <span class="comment-date">${formattedDate}</span>
          </div>
          ${
            isOwner
              ? `
            <div class="comment-actions" data-comment-id="${comment.id}">
              <button class="menu-btn" aria-label="Opciones de comentario">•••</button>
              <div class="menu-dropdown is-hidden">
                <button class="menu-item edit-btn">Editar</button>
                <button class="menu-item delete-btn">Eliminar</button>
              </div>
  
          </div>
          `
              : ''
          }
        </div>
        <p class="comment-body">${comment.comment_text}</p>
      `;
    return commentEl;
  }

  function initializeSeriesComments() {
    const commentForm = document.getElementById('series-comment-form');
    const commentText = document.getElementById('series-comment-text');
    const charCounter = document.getElementById('series-char-counter');
    const commentError = document.getElementById('series-comment-error');
    const commentsList = document.getElementById('series-comments-list');
    const noCommentsMsg = document.getElementById('series-no-comments-message');
    const commentCountSpan = document.getElementById('series-comment-count');
    const readMoreBtn = document.getElementById('series-read-more-btn');
    const modal = document.getElementById('series-comments-modal');
    const closeModalBtn = document.getElementById('series-close-modal-btn');
    const modalCommentsList = document.getElementById(
      'series-modal-comments-list'
    );
    if (
      commentForm instanceof HTMLFormElement &&
      commentText instanceof HTMLTextAreaElement
    ) {
      commentText.addEventListener('input', () => {
        if (charCounter)
          charCounter.textContent = `${commentText.value.length}/1000`;
      });
      commentForm.addEventListener('submit', async (e) => {
        e.preventDefault();

        const text = commentText.value.trim();
        if (!text || !seriesId || !commentError) return;
        commentError.style.display = 'none';

        try {
          const response = await fetch('/api/comments/series/add', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ seriesId, commentText: text }),
          });

          const newCommentData = await response.json();
          if (!response.ok)
            throw new Error(newCommentData.error || 'Error al publicar.');

          commentText.value = '';
          if (charCounter) charCounter.textContent = '0/1000';

          if (noCommentsMsg) noCommentsMsg.style.display = 'none';

          const newCommentEl = createCommentElement(newCommentData, user);
          commentsList?.prepend(newCommentEl);

          if (commentCountSpan)
            commentCountSpan.textContent = (
              parseInt(commentCountSpan.textContent || '0') + 1
            ).toString();
          comments.unshift(newCommentData);

          updateCommentVisibility();
        } catch (err) {
          if (err instanceof Error && commentError) {
            commentError.textContent = err.message;
            commentError.style.display = 'block';
          }
        }
      });
    }

    const handleCommentClick = async (e) => {
      if (!(e.target instanceof HTMLElement)) return;
      const container = e.currentTarget;

      if (!e.target.closest('.comment-actions')) {
        container
          .querySelectorAll('.menu-dropdown:not(.is-hidden)')
          .forEach((menu) => menu.classList.add('is-hidden'));
      }

      const menuBtn = e.target.closest('.menu-btn');
      if (menuBtn) {
        const dropdown = menuBtn.nextElementSibling;
        dropdown?.classList.toggle('is-hidden');
        return;
      }

      const deleteBtn = e.target.closest('.delete-btn');
      if (deleteBtn) {
        if (confirm('¿Estás seguro de que quieres eliminar este comentario?')) {
          const actionContainer = deleteBtn.closest('.comment-actions');
          const commentId = actionContainer?.dataset.commentId;
          if (!commentId) return;

          try {
            const response = await fetch('/api/comments/series/delete-own', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },

              body: JSON.stringify({ commentId: parseInt(commentId) }),
            });
            const result = await response.json();
            if (!response.ok)
              throw new Error(
                result.error || 'No se pudo eliminar el comentario.'
              );

            document
              .querySelectorAll(`#series-comment-${commentId}`)
              .forEach((el) => el.remove());
            if (commentCountSpan)
              commentCountSpan.textContent = (
                parseInt(commentCountSpan.textContent || '1') - 1
              ).toString();

            comments = comments.filter((c) => c.id !== parseInt(commentId));
            updateCommentVisibility();
          } catch (err) {
            if (err instanceof Error) alert(err.message);
          }
        }
      }

      const editBtn = e.target.closest('.edit-btn');
      if (editBtn) {
        const commentElement = editBtn.closest('.comment');
        if (
          !(commentElement instanceof HTMLElement) ||
          commentElement.classList.contains('is-editing')
        )
          return;

        const currentlyEditing = container.querySelector('.comment.is-editing');
        if (currentlyEditing instanceof HTMLElement) {
          const p = document.createElement('p');
          p.className = 'comment-body';
          p.textContent = currentlyEditing.dataset.originalText || '';
          currentlyEditing.querySelector('.edit-container')?.replaceWith(p);
          currentlyEditing.classList.remove('is-editing');
        }

        const commentBody = commentElement.querySelector('.comment-body');
        if (commentBody instanceof HTMLParagraphElement) {
          const originalText = commentBody.textContent || '';
          commentElement.dataset.originalText = originalText;
          commentElement.classList.add('is-editing');

          const editContainer = document.createElement('div');
          editContainer.className = 'edit-container';
          editContainer.innerHTML = `
                    <textarea class="edit-textarea" maxlength="1000">${originalText}</textarea>
                    <div class="edit-actions">
                        <button class="edit-cancel-btn">Cancelar</button>
                        <button class="edit-save-btn">Guardar</button>
     
               </div>
                    <p class="edit-error" style="display:none;"></p>
                `;
          commentBody.replaceWith(editContainer);
          const textarea = editContainer.querySelector('.edit-textarea');
          if (textarea instanceof HTMLTextAreaElement) {
            textarea.focus();
          }
        }
      }

      const cancelBtn = e.target.closest('.edit-cancel-btn');
      if (cancelBtn) {
        const commentElement = cancelBtn.closest('.comment');
        const editContainer = cancelBtn.closest('.edit-container');
        if (commentElement instanceof HTMLElement && editContainer) {
          const p = document.createElement('p');
          p.className = 'comment-body';
          p.textContent = commentElement.dataset.originalText || '';
          editContainer.replaceWith(p);
          commentElement.classList.remove('is-editing');
        }
      }

      const saveBtn = e.target.closest('.edit-save-btn');
      if (saveBtn) {
        const commentElement = saveBtn.closest('.comment');
        const editContainer = saveBtn.closest('.edit-container');
        const actionContainer =
          commentElement?.querySelector('.comment-actions');
        const commentId = actionContainer?.dataset.commentId;
        const textarea = editContainer?.querySelector('.edit-textarea');
        const errorP = editContainer?.querySelector('.edit-error');
        if (
          !(commentElement instanceof HTMLElement) ||
          !editContainer ||
          !commentId ||
          !(textarea instanceof HTMLTextAreaElement) ||
          !(errorP instanceof HTMLParagraphElement)
        )
          return;
        const newCommentText = textarea.value.trim();
        if (
          newCommentText === commentElement.dataset.originalText ||
          !newCommentText
        ) {
          const cancel = editContainer.querySelector('.edit-cancel-btn');
          if (cancel instanceof HTMLElement) cancel.click();
          return;
        }

        try {
          const response = await fetch('/api/comments/series/edit', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },

            body: JSON.stringify({
              commentId: parseInt(commentId),
              commentText: newCommentText,
            }),
          });
          const result = await response.json();
          if (!response.ok)
            throw new Error(result.error || 'No se pudo editar el comentario.');
          document
            .querySelectorAll(`#series-comment-${commentId}`)
            .forEach((el) => {
              const body = el.querySelector('.comment-body');
              if (body) body.textContent = result.comment_text;
              const editContainer = el.querySelector('.edit-container');
              if (editContainer) {
                const p = document.createElement('p');
                p.className = 'comment-body';
                p.textContent = result.comment_text;
                editContainer.replaceWith(p);
              }
              el.classList.remove('is-editing');
            });
          const commentIndex = comments.findIndex(
            (c) => c.id === parseInt(commentId)
          );
          if (commentIndex > -1) {
            comments[commentIndex].comment_text = result.comment_text;
          }
        } catch (err) {
          if (err instanceof Error) {
            errorP.textContent = err.message;
            errorP.style.display = 'block';
          }
        }
      }
    };
    commentsList?.addEventListener('click', handleCommentClick);
    modalCommentsList?.addEventListener('click', handleCommentClick);

    if (readMoreBtn && modal && closeModalBtn && modalCommentsList) {
      readMoreBtn.addEventListener('click', () => {
        modalCommentsList.innerHTML = '';
        comments.forEach((comment) => {
          const commentEl = createCommentElement(comment, user);
          modalCommentsList.appendChild(commentEl);
        });

        modal.classList.remove('is-hidden');
      });
      const closeModal = () => modal.classList.add('is-hidden');
      closeModalBtn.addEventListener('click', closeModal);
      modal.addEventListener('click', (e) => {
        if (e.target === modal) closeModal();
      });
    }

    updateCommentVisibility();
    formatAllDates(); // ✅ LLAMAMOS A LA FUNCIÓN PARA FORMATEAR LAS FECHAS INICIALES
  }

  document.addEventListener('astro:page-load', initializeSeriesComments);
  initializeSeriesComments();
</script>

<style>
  /* ✅ NUEVO ESTILO PARA EL BOTÓN-ENLACE */
  .link-button {
    background: none;
    border: none;
    padding: 0;
    color: var(--accent-color);
    text-decoration: underline;
    cursor: pointer;
    font-size: inherit;
    font-family: inherit;
  }
  /* --- ESTILOS GENERALES Y FORMULARIO (Sin cambios) --- */
  .comments-section {
    width: 100%;
    max-width: none;
    margin: 0;
    padding-top: 0;
  }
  .comments-header {
    display: flex;
    justify-content: space-between;
    align-items: baseline;
    margin-bottom: 1.5rem;
    flex-wrap: wrap;
    gap: 1rem;
  }
  .comments-header h3 {
    margin: 0;
    font-size: 1.5rem;
  }
  .comment-form textarea {
    width: 100%;
    background: #2a2a2a;
    border: 1px solid #444;
    color: var(--font-color);
    padding: 0.75rem;
    border-radius: 6px;
    min-height: 100px;
    resize: vertical;
    margin-bottom: 0.5rem;
    font-family: inherit;
    font-size: 1rem;
  }
  .comment-form-actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  #series-char-counter {
    font-size: 0.8rem;
    color: #aaa;
  }
  .comment-form button {
    background-color: var(--accent-color);
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  .comment-form button:hover {
    background-color: #009acd;
  }
  #series-comment-error {
    color: #ff6b6b;
    font-size: 0.9rem;
    margin-top: 0.5rem;
    text-align: right;
  }
  .comment-login-prompt {
    text-align: center;
    color: #aaa;
    margin: 0;
    padding: 1rem;
    background-color: var(--card-background);
    border-radius: 8px;
  }
  .comment-login-prompt a {
    color: var(--accent-color);
    text-decoration: underline;
  }
  .comments-list {
    margin-top: 2rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  /* --- ESTILOS GLOBALES PARA COMENTARIOS DINÁMICOS --- */
  :global(.comment) {
    background-color: var(--card-background);
    padding: 1.25rem;
    border-radius: 8px;
    text-align: left;
    border: 1px solid #2a2a2a;
    transition: opacity 0.3s ease;
  }
  :global(.comment.is-hidden) {
    display: none;
  }
  :global(.comment-header) {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 0.75rem;
    gap: 1rem;
  }
  :global(.comment-meta) {
    display: flex;
    align-items: baseline;
    gap: 0.5rem;
    flex-wrap: wrap;
    flex-grow: 1;
  }
  :global(.comment-author) {
    font-weight: bold;
    color: #eee;
  }
  :global(.comment-separator) {
    color: #555;
  }
  :global(.comment-date) {
    font-size: 0.8rem;
    color: #888;
  }
  :global(.comment-body) {
    color: #ddd;
    line-height: 1.6;
    white-space: pre-wrap;
    word-wrap: break-word;
    padding-left: 0.25rem;
  }
  :global(.comment-actions) {
    position: relative;
    flex-shrink: 0;
  }
  :global(.menu-btn) {
    background: none;
    border: none;
    color: #888;
    cursor: pointer;
    font-size: 1.2rem;
    font-weight: bold;
    line-height: 1;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
  }
  :global(.menu-btn:hover) {
    background-color: #333;
    color: #fff;
  }
  :global(.menu-dropdown) {
    position: absolute;
    top: 100%;
    right: 0;
    background-color: #2a2a2a;
    border: 1px solid #444;
    border-radius: 6px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
    z-index: 10;
    padding: 0.5rem 0;
    width: 120px;
  }
  :global(.menu-dropdown.is-hidden) {
    display: none;
  }
  :global(.menu-item) {
    display: block;
    width: 100%;
    background: none;
    border: none;
    color: #ddd;
    padding: 0.5rem 1rem;
    text-align: left;
    cursor: pointer;
    font-size: 0.9rem;
  }
  :global(.menu-item:hover) {
    background-color: var(--accent-color);
    color: white;
  }
  :global(.menu-item.delete-btn) {
    color: #ff6b6b;
  }
  :global(.menu-item.delete-btn:hover) {
    background-color: #c0392b;
    color: white;
  }

  /* --- NUEVOS ESTILOS GLOBALES PARA EL MODO EDICIÓN --- */
  :global(.edit-container) {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  :global(.edit-textarea) {
    width: 100%;
    background: #3a3a3a;
    border: 1px solid #555;
    color: var(--font-color);
    padding: 0.5rem;
    border-radius: 4px;
    min-height: 80px;
    resize: vertical;
    font-family: inherit;
    font-size: 0.95rem;
  }
  :global(.edit-actions) {
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
  }
  :global(.edit-actions button) {
    padding: 0.25rem 0.75rem;
    border-radius: 4px;
    font-weight: bold;
    cursor: pointer;
    border: none;
    font-size: 0.8rem;
  }
  :global(.edit-cancel-btn) {
    background-color: #555;
    color: white;
  }
  :global(.edit-save-btn) {
    background-color: var(--accent-color);
    color: white;
  }
  :global(.edit-error) {
    color: #ff6b6b;
    font-size: 0.8rem;
    text-align: right;
  }

  /* --- ESTILOS RESTANTES (Sin cambios) --- */
  .no-comments-message {
    font-style: italic;
    color: #888;
  }
  .read-more-btn {
    background-color: #333;
    color: var(--font-color);
    padding: 0.5rem 1.5rem;
    border: 1px solid #555;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  .read-more-btn:hover {
    background-color: #444;
  }
  .comments-modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(5px);
    z-index: 2000;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  .comments-modal-overlay.is-hidden {
    display: none;
  }
  .comments-modal-panel {
    background: var(--card-background);
    width: 90%;
    max-width: 700px;
    max-height: 80vh;
    border-radius: 8px;
    display: flex;
    flex-direction: column;
  }
  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 1.5rem;
    border-bottom: 1px solid #444;
  }
  .close-modal-btn {
    background: none;
    border: none;
    color: #aaa;
    font-size: 2rem;
    line-height: 1;
    cursor: pointer;
  }
  .modal-comments-list {
    overflow-y: auto;
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
</style>
